

MANUFACTURER_PIDS = [
  {'id': 0x00a1,
   'name': 'Creative Lighting',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'mode', 'type': 'uint8', 'enums': [
                            (0, 'DMX512'), (1, 'DALI'), (2, 'DSI')]
                          }
                        ]},
       'get_sub_device_range': 2,
       'name': 'DEVICE_MODE',
       'set_request': {'items': [{'name': 'mode', 'type': 'uint8',
                                  'enums': [(0, 'DMX512'), (1, 'DALI'), (2, 'DSI')]
                      }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.creativelighting.com.au/datasheets/RDM%20Supplement.pdf',
       'notes': 'Controls the operating mode of the device',
       'value': 32768}]
  },
  {'id': 0x4845,
   'name': 'Howard Eaton Lighting',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'enabled', 'type': 'bool'},
                          {'name': 'max_allowed', 'type': 'uint8'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'PWRUP_TEST',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.goddarddesign.com/pdf_doc/rdmlabpack%20srn%20v2p9.pdf',
       'notes': 'Enable/disable the Power On Self Test (POST).',
       'value': 0xc857},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'dmx_nsc_packet_count', 'type': 'uint16'},
                          {'name': 'dmx_asc_packet_count', 'type': 'uint16'},
                          {'name': 'rdm_asc_packet_count', 'type': 'uint16'},
                          {'name': 'uart_errors', 'type': 'uint8'},
                          {'name': 'device_minutes', 'type': 'uint8'},
                          {'name': 'brownout_count', 'type': 'uint8'},
                          {'name': 'watchdog_resets', 'type': 'uint8'},
                          {'name': 'software_resets', 'type': 'uint8'},
                          {'name': 'dither_adjust', 'type': 'uint16'},
                          {'name': 'record_sensor_counts', 'type': 'uint8'},
                        ]},
       'get_sub_device_range': 0,
       'name': 'INTERNAL_STATS',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.goddarddesign.com/pdf_doc/rdmlabpack%20srn%20v2p9.pdf',
       'notes': 'Fetch the internal stats.',
       'value': 0xc862},
    ],
  },
  {'id': 0x4a61,
   'name': 'Jands',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'enabled', 'type': 'bool'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'NE_FAULT_DETECT_MODE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Turns the Neutral-Earth (N-E) fault detector on and off.',
       'value': 0x8080},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'DMX_PROTECT_MODE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Unknown.',
       'value': 0x8082},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'mode', 'type': 'uint8',
                           'enums': [(0, 'Hold'), (1, 'Fade to scene #1')]
                          }
                        ]},
       'get_sub_device_range': 0,
       'name': 'DMX_LOSS_MODE',
       'set_request': {'items': [{'name': 'mode', 'type': 'uint8',
                                  'enums': [
                                      # TODO: check if we can use scene 2 as well
                                      (0, 'Hold'), (1, 'Fade to scene #1')]
                          }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Controls the behaviour when the DMX signal is lost.',
       'value': 0x8084},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'level', 'type': 'uint8', 'enums': [
                            (0, 'Off')]
                          }
                        ]},
       'get_sub_device_range': 2,
       'name': 'PREHEAT_LEVEL',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8',
                                  'enums': [(0, 'Off')],
                                  'range': [(0, 0x32)],
                          }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'The Preheat function is used to  inject a small amount of power into the lamps when the control is set to zero.',
       'value': 0x8086},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'cap', 'type': 'uint8',
                           'enums': [(0, 'Off'),
                                     (1, '95%'),
                                     (2, '90%'),
                                     (3, '85%'),
                                     (4, '80%'),
                                     (5, '75%'),
                                     (6, '70%'),
                                     (7, '65%'),
                                     (8, '60%'),
                                     (9, '55%'),
                                     (10, '50%'),
                                     (11, '45%'),
                                     (12, '40%')],
                          }
                        ]},
       'get_sub_device_range': 2,
       'name': 'OUTPUT_CAP_VALUE',
       'set_request': {'items': [{'name': 'cap', 'type': 'uint8',
                                   'enums': [(0, 'Off'),
                                             (1, '95%'),
                                             (2, '90%'),
                                             (3, '85%'),
                                             (4, '80%'),
                                             (5, '75%'),
                                             (6, '70%'),
                                             (7, '65%'),
                                             (8, '60%'),
                                             (9, '55%'),
                                             (10, '50%'),
                                             (11, '45%'),
                                             (12, '40%'),
                                            ],
                          }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Scale the output power of by a preset percentage. Each increment reduces output power by 5%, down to a minimum value of 40%. See the manual for more details on output voltage.',
       'value': 0x8088},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'DMX_TERM_MODE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Enable DMX termination.',
       'value': 0x808A},
    ]
  },
  {'id': 0x4d50,
   'name': 'Martin Professional A/S',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'DMX_LAMP_OFF_ENABLE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if the fixture will accept a lamp on/off command via the DMX protocol',
       'value': 0x8000},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'reset_mode',
                                   'type': 'uint8',
                                   'enums': [(0, 'Off'),
                                             (1, 'On'),
                                             (2, '5 second delay')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'DMX_RESET_ENABLE',
       'set_request': {'items': [{'name': 'reset_mode',
                                  'type': 'uint8',
                                  'enums': [(0, 'Off'),
                                            (1, 'On'),
                                            (2, '5 second delay')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if the fixture will accept a reset command via the DMX protocol.',
       'value': 0x8001},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'MCX_LAMP_OFF_ENABLE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if the fixture will treat key seven on the MCX as a lamp power-off button.',
       'value': 0x8002},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'STAND_ALONE_OPERATION_ENABLE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if the fixture is in stand-alone mode',
       'value': 0x8100},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'mode',
                                   'type': 'uint8',
                                   'enums': [(0, 'Single Fixture'),
                                             (1, 'Master Fixture'),
                                             (2, 'Syncronized fixture')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'SYNCHRONIZED',
       'set_request': {'items': [{'name': 'sycronization_mode',
                                  'type': 'uint8',
                                  'enums': [(0, 'Single Fixture'),
                                            (1, 'Master Fixture'),
                                            (2, 'Syncronized fixture')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the master / slave setting when in stand-alone mode.',
       'value': 0x8101},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'auto_program_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'AUTO_PROGRAM_ENABLE',
       'set_request': {'items': [{'name': 'auto_program_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Enable auto play for stand alone mode when power is applied.'
                 ' This requires STAND_ALONE_OPERATION_ENABLE to be on.'),
       'value': 0x8102},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'timer_settings',
                                   'type': 'uint8',
                                   'enums': [(0, 'No timers enabled'),
                                             (1, 'Timer 1 enabled'),
                                             (2, 'Timer 2 enabled'),
                                             (3, 'Timer 1 & Timer 2 enabled')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'ENABLE_TIMERS',
       'set_request': {'items': [{'name': 'timer_settings',
                                  'type': 'uint8',
                                  'enums': [(0, 'No timers enabled'),
                                            (1, 'Timer 1 enabled'),
                                            (2, 'Timer 2 enabled'),
                                            (3, 'Timer 1 & Timer 2 enabled')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Enable or disable the timers on the device.',
       'value': 0x8103},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                                  {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                                 ]},
       'get_sub_device_range': 0,
       'name': 'TIMER1_START_TIME',
       'set_request': {'items': [{'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                                 {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                                ]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'The start time for Timer 1.',
       'value': 0x8104},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                                  {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                                 ]},
       'get_sub_device_range': 0,
       'name': 'TIMER1_END_TIME',
       'set_request': {'items': [{'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                                 {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                                ]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'The end time for Timer 1.',
       'value': 0x8105},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                                  {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                                 ]},
       'get_sub_device_range': 0,
       'name': 'TIMER2_START_TIME',
       'set_request': {'items': [{'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                                 {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                                ]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'The start time for Timer 2.',
       'value': 0x8106},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                                  {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                                 ]},
       'get_sub_device_range': 0,
       'name': 'TIMER2_END_TIME',
       'set_request': {'items': [{'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                                 {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                                ]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'The end time for Timer 2.',
       'value': 0x8107},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'LIGHTSENSOR_LEVEL_TRIGGER_ENABLE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Enables the light sensor to start the stand alone program. '
                 'If both timers and light level are enabled, both conditions '
                 'have to be met to start the stand alone program.'),
       'value': 0x8108},
      {'name': 'CAPTURE_CURRENT_SENSOR_VALUE',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Capture the current light level and set this as the '
                 'threshold for the light trigger.'),
       'value': 0x8109},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'trigger_level', 'type': 'uint16'}]},
       'get_sub_device_range': 0,
       'name': 'LIGHTSENSOR_TRIGGER_LEVEL',
       'set_request': {'items': [{'name': 'trigger_level', 'type': 'uint16'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Get/Set the value at which the light level sensor triggers.',
       'value': 0x810a},
      {'name': 'ADD_SCENE',
       'set_request': {'items': []},
       'set_response': {'items': [{'name': 'current_scene', 'type': 'uint8'},
                                  {'name': 'total_scenes', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Add a scene at the end of the scene list. The response '
                 'includes the current scene number and the total number '
                 'of scenes.'),
       'value': 0x8200},
      {'name': 'INSERT_SCENE',
       'set_request': {'items': []},
       'set_response': {'items': [{'name': 'current_scene', 'type': 'uint8'},
                                  {'name': 'total_scenes', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Insert a scene before the current scene. The response '
                 'includes the current scene number and the total number '
                 'of scenes.'),
       'value': 0x8201},
      {'name': 'STORE_SCENE',
       'set_request': {'items': []},
       'set_response': {'items': [{'name': 'current_scene', 'type': 'uint8'},
                                  {'name': 'total_scenes', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Store the current values for the current scene. The response'
                 ' includes the current scene number and the total number '
                 'of scenes.'),
       'value': 0x8202},
      {'name': 'DELETE_SCENE',
       'set_request': {'items': []},
       'set_response': {'items': [{'name': 'current_scene', 'type': 'uint8'},
                                  {'name': 'total_scenes', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Delete the current scene. The response includes the current '
                 'scene number and the total number of scenes.'),
       'value': 0x8203},
      {'name': 'DELETE_ALL_SCENES',
       'set_request': {'items': []},
       'set_response': {'items': [{'name': 'current_scene', 'type': 'uint8'},
                                  {'name': 'total_scenes', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Delete all scenes. The response includes the current '
                 'scene number and the total number of scenes.'),
       'value': 0x8204},
      {'name': 'NEXT_SCENE',
       'get_request': {'items': []},
       'get_response': {'items': [{'name': 'current_scene', 'type': 'uint8'},
                                  {'name': 'total_scenes', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'link': '',
       'notes': ('Move to the next scene. The response includes the current '
                 'scene number and the total number of scenes.'),
       'value': 0x8205},
      {'name': 'PREVIOUS_SCENE',
       'get_request': {'items': []},
       'get_response': {'items': [{'name': 'current_scene', 'type': 'uint8'},
                                  {'name': 'total_scenes', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'link': '',
       'notes': ('Move to the previous scene. The response includes the '
                 'current scene number and the total number of scenes.'),
       'value': 0x8206},
      {'name': 'SCENE_SETTINGS',
       'get_request': {'items': []},
       'get_response': {'items': [{'type': 'group',
                                   'name': 'scene_settings',
                                   'items': [{'name': 'setting', 'type': 'uint8'}]
                                   }]},
       'get_sub_device_range': 0,
       'link': '',
       'notes': 'Get the scene settings for the current scene.',
       'value': 0x8207},
      {'name': 'RUN_PROGRAM',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Start running the programmed scenes in the stand alone program.',
       'value': 0x8208},
      {'name': 'SCENE_NUMBER',
       'get_request': {'items': []},
       'get_response': {'items': [{'name': 'current_scene', 'type': 'uint8'},
                                  {'name': 'total_scenes', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'link': '',
       'notes': 'Get the current scene number and total number of scenes.',
       'value': 0x820A},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'hours', 'type': 'uint8', 'range': [(0, 23)]},
                                  {'name': 'minutes', 'type': 'uint8', 'range': [(0, 59)]},
                                  {'name': 'seconds', 'type': 'uint8', 'range': [(0, 59)]},
                                 ]},
       'get_sub_device_range': 0,
       'name': 'SCENE_WAIT_TIME',
       'set_request': {'items': [{'name': 'hours', 'type': 'uint8', 'range': [(0, 23)]},
                                 {'name': 'minutes', 'type': 'uint8', 'range': [(0, 59)]},
                                 {'name': 'seconds', 'type': 'uint8', 'range': [(0, 59)]},
                                 ]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Controls the wait time for the current scene. Some fixtures '
                 'may not support up to 24 hours of wait time.'),
       'value': 0x820b},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'hours', 'type': 'uint8', 'range': [(0, 23)]},
                                  {'name': 'minutes', 'type': 'uint8', 'range': [(0, 59)]},
                                  {'name': 'seconds', 'type': 'uint8', 'range': [(0, 59)]},
                                 ]},
       'get_sub_device_range': 0,
       'name': 'SCENE_FADE_TIME',
       'set_request': {'items': [{'name': 'hours', 'type': 'uint8', 'range': [(0, 23)]},
                                 {'name': 'minutes', 'type': 'uint8', 'range': [(0, 59)]},
                                 {'name': 'seconds', 'type': 'uint8', 'range': [(0, 59)]},
                                 ]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Controls the fade time for the current scene. Some fixtures '
                 'may not support up to 24 hours of fade time.'),
       'value': 0x820c},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'intensity', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_INTENSITY',
       'set_request': {'items': [{'name': 'intensity', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the intensity for the current scene.',
       'value': 0x820d},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_CYAN',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the cyan level for the current scene.',
       'value': 0x820e},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_MAGENTA',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the magenta level for the current scene.',
       'value': 0x820f},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_YELLOW',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the yellow level for the current scene.',
       'value': 0x8210},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_RED',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the red level for the current scene.',
       'value': 0x8211},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_GREEN',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the green level for the current scene.',
       'value': 0x8212},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_BLUE',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the blue level for the current scene.',
       'value': 0x8213},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_AMBER',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the amber level for the current scene.',
       'value': 0x8214},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_WHITE',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the white level for the current scene.',
       'value': 0x8215},

      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'zoom', 'type': 'uint16'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_ZOOM',
       'set_request': {'items': [{'name': 'zoom', 'type': 'uint16'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the zoom setting for the scene.',
       'value': 0x8216},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'focus', 'type': 'uint16'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_FOCUS',
       'set_request': {'items': [{'name': 'focus', 'type': 'uint16'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the focus setting for the scene.',
       'value': 0x8217},
# This doesn't have a pid defined in the document
#      {'get_request': {'items': []},
#       'get_response': {'items': [{'name': 'color_mode',
#                                   'type': 'uint8',
#                                   'enums': [(0, 'White'),
#                                             (1, 'Amber'),
#                                             (2, 'red'),
#                                             (3, 'Green'),
#                                             (4, 'Blue')],
#                                  }]},
#       'get_sub_device_range': 0,
#       'name': 'SCENE_COLOR',
#       'set_request': {'items': [{'name': 'color_mode',
#                                  'type': 'uint8',
#                                  'enums': [(0, 'White'),
#                                            (1, 'Amber'),
#                                            (2, 'red'),
#                                            (3, 'Green'),
#                                            (4, 'Blue')],
#                                  }]},
#       'set_response': {'items': []},
#       'set_sub_device_range': 0,
#       'link': '',
#       'notes': 'Controls the color mode for the current scene.',
#       'value': 0x},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'color_wheel',
                                   'type': 'uint8',
                                   'enums': [(0, 'Random colors off'),
                                             (1, 'CMY slow'),
                                             (2, 'CMY medium'),
                                             (3, 'CMY fast'),
                                             (4, 'Magenta/Yellow slow'),
                                             (5, 'Magenta/Yellow medium'),
                                             #(4, 'Magenta/Yellow fast'),
                                             (6, 'Cyan/Magenta slow'),
                                             (7, 'Cyan/Magenta medium'),
                                             (8, 'Cyan/Magenta fast'),
                                             (9, 'Cyan/Yellow slow'),
                                             (10, 'Cyan/Yellow medium'),
                                             (11, 'Cyan/Yellow fast')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'SCENE_RANDOM_COLOR',
       'set_request': {'items': [{'name': 'color_wheel',
                                  'type': 'uint8',
                                  'enums': [(0, 'Random colors off'),
                                            (1, 'CMY slow'),
                                            (2, 'CMY medium'),
                                            (3, 'CMY fast'),
                                            (4, 'Magenta/Yellow slow'),
                                            (5, 'Magenta/Yellow medium'),
                                            #(4, 'Magenta/Yellow fast'),
                                            (6, 'Cyan/Magenta slow'),
                                            (7, 'Cyan/Magenta medium'),
                                            (8, 'Cyan/Magenta fast'),
                                            (9, 'Cyan/Yellow slow'),
                                            (10, 'Cyan/Yellow medium'),
                                            (11, 'Cyan/Yellow fast')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the random color setting for the current scene.',
       'value': 0x8218},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'color_wheel',
                                   'type': 'uint8',
                                   'enums': [(0, 'White (Open)'),
                                             (1, 'Color 1'),
                                             (2, 'Color 2'),
                                             (3, 'Color 3'),
                                             (4, 'Color 4'),
                                             (5, 'Color 5')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'SCENE_COLOR_WHEEL',
       'set_request': {'items': [{'name': 'color_wheel',
                                  'type': 'uint8',
                                  'enums': [(0, 'White (Open)'),
                                            (1, 'Color 1'),
                                            (2, 'Color 2'),
                                            (3, 'Color 3'),
                                            (4, 'Color 4'),
                                            (5, 'Color 5')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the color wheel for the current scene.',
       'value': 0x8219},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'gobo_wheel',
                                   'type': 'uint8',
                                   'enums': [(0, 'White (Open)'),
                                             (1, 'Gobo 1'),
                                             (2, 'Gobo 2'),
                                             (3, 'Gobo 3'),
                                             (4, 'Gobo 1 rotation'),
                                             (5, 'Gobo 2 rotation'),
                                             (6, 'Gobo 3 rotation')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'SCENE_GOBO_SELECTION',
       'set_request': {'items': [{'name': 'gobo_wheel',
                                  'type': 'uint8',
                                  'enums': [(0, 'White (Open)'),
                                            (1, 'Gobo 1'),
                                            (2, 'Gobo 2'),
                                            (3, 'Gobo 3'),
                                            (4, 'Gobo 1 rotation'),
                                            (5, 'Gobo 2 rotation'),
                                            (6, 'Gobo 3 rotation')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the gobo wheel for the current scene.',
       'value': 0x821a},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'gobo_index', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_GOBO_INDEXING',
       'set_request': {'items': [{'name': 'gobo_index', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the gobo index for the current scene.',
       'value': 0x821b},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'animation_position', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_ANIMATION_POSITION',
       'set_request': {'items': [{'name': 'animation_position', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the animation position for the current scene.',
       'value': 0x821c},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'animation_indexing', 'type': 'uint8'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_ANIMATION_INDEXING',
       'set_request': {'items': [{'name': 'animation_indexing', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the animation indexing for the current scene.',
       'value': 0x821d},
      {'name': 'SCENE_GET_DMX',
       'set_request': {'items': [{'name': 'capture_dmx', 'type': 'uint8',
                                  'enums': [(0, 'Add to the end of the scene list'),
                                            (1, 'Insert before the current scene')],
                                }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Record the current DMX values and save it as a scene.',
       'value': 0x821e},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'frost_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'SCENE_FROST_ENABLE',
       'set_request': {'items': [{'name': 'frost_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the frost setting for the current scene.',
       'value': 0x821f},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'shutter_blackout_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'AUTO_SHUTTER_BO_ENABLE',
       'set_request': {'items': [{'name': 'shutter_blackout_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if the shutter is closed when dimming.',
       'value': 0x8300},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'effect_speed',
                                   'type': 'uint8',
                                   'enums': [(0, 'Follow pan/tilt speed'),
                                             (1, 'Normal Speed'),
                                             (2, 'Fast Speed'),
                                             (3, 'Slow Speed'),
                                             (4, 'Safe Speed')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'EFFECT_SPEED',
       'set_request': {'items': [{'name': 'effect_speed',
                                  'type': 'uint8',
                                  'enums': [(0, 'Follow pan/tilt speed'),
                                            (1, 'Normal Speed'),
                                            (2, 'Fast Speed'),
                                            (3, 'Slow Speed'),
                                            (4, 'Safe Speed')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the effect speed of the fixture.',
       'value': 0x8301},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'effect_shortcuts_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'EFFECT_SHORTCUTS_ENABLE',
       'set_request': {'items': [{'name': 'effect_shortcuts_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if effect shortcuts are enabled.',
       'value': 0x8302},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'effect_feedback_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'EFFECT_FEEDBACK_ENABLE',
       'set_request': {'items': [{'name': 'effect_feedback_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if effect feedback is enabled.',
       'value': 0x8303},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'lamp_warning_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'LAMP_HOUR_WARNING_ENABLE',
       'set_request': {'items': [{'name': 'lamp_warning_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Controls if the fixture will trigger a lamp warning when '
                 ' the configured lamp hour value is reached.'),
       'value': 0x8304},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'lamp_hours', 'type': 'uint16'}]},
       'get_sub_device_range': 0,
       'name': 'LAMP_HOUR_WARNING_HOURS',
       'set_request': {'items': [{'name': 'lamp_hours', 'type': 'uint16'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the lamp hours limit for the warning message.',
       'value': 0x8305},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'air_filter_hours', 'type': 'uint16'}]},
       'get_sub_device_range': 0,
       'name': 'AIR_FILTER_HOUR',
       'set_request': {'items': [{'name': 'air_filter_hours', 'type': 'uint16'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Get or Set the air filter hours.',
       'value': 0x8306},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'air_filter_hours', 'type': 'uint16'}]},
       'get_sub_device_range': 0,
       'name': 'AIR_FILTER_HOUR_WARNING_HOURS',
       'set_request': {'items': [{'name': 'air_filter_hours', 'type': 'uint16'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the air filter hours limit for the warning message.',
       'value': 0x8307},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enable_error_display', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'DISPLAY_ERRORS_ENABLE',
       'set_request': {'items': [{'name': 'enable_error_display', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Controls if the fixture will flash error messages on the'
                 ' display.'),
       'value': 0x8308},


      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'lamp_error_test_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'LAMP_ERROR_TEST_ENABLE',
       'set_request': {'items': [{'name': 'lamp_error_test_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Controls if the temperature sensor in the head is used to '
                 'test if the lamp is actually on or off.'),
       'value': 0x8309},
      {'name': 'SAVE_CUSTOM_CONFIGURATION',
       'set_request': {'items': [{'name': 'configuration_number',
                                  'type': 'uint8',
                                  'range': [(0, 255)],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Saves the user settings as a configuration.',
       'value': 0x830a},
      {'name': 'LOAD_CUSTOM_CONFIGURATION',
       'set_request': {'items': [{'name': 'configuration_number',
                                  'type': 'uint8',
                                  'range': [(0, 255)],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Loads the user settings from a saverd configuration.',
       'value': 0x830b},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'barndoor_software_version',
                                   'type': 'string',
                                   'min_size': 6,
                                   'max_size': 32}]},
        'get_sub_device_range': 2,
        'name': 'BARNDOOR_SOFTWARE_VERSION',
        'link': '',
        'notes': 'Get the version of the barndoor software.',
        'value': 0x830c},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'cmy_blackout_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'CMY_BLACKOUT_ENABLE',
       'set_request': {'items': [{'name': 'cmy_blackout_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Controls if CMY blackout is enabled. Enabling this setting '
                 'will active CMY blackout 3 seconds after the shutter closes '
                 'to 0% intensity.'),
       'value': 0x830d},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'tracking_mode',
                                   'type': 'uint8',
                                   'enums': [(0, 'Absolute delta value algorithm'),
                                             (1, 'Real delta value algorithm')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'TRACKING_MODE',
       'set_request': {'items': [{'name': 'tracking_mode',
                                  'type': 'uint8',
                                  'enums': [(0, 'Absolute delta value algorithm'),
                                            (1, 'Real delta value algorithm')],
                                }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the tracking mode of the fixture',
       'value': 0x830e},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'tracking_mode',
                                   'type': 'uint8',
                                   'range': [(1, 10)],
                                 }]},
       'get_sub_device_range': 0,
       'name': 'TRACKING_CAL',
       'set_request': {'items': [{'name': 'tracking_mode',
                                  'type': 'uint8',
                                  'range': [(1, 10)],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the tracking sample rate',
       'value': 0x830f},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'dimmer_curve',
                                   'type': 'uint8',
                                   'range': [(0, 255)],
                                   'enums': [(0, 'Optical linear'),
                                             (1, 'Square law'),
                                             (2, 'Inverse square law'),
                                             (3, 'S-curve')],
                                 }]},
       'get_sub_device_range': 0,
       'name': 'DIMMER_CURVE',
       'set_request': {'items': [{'name': 'dimmer_curve',
                                  'type': 'uint8',
                                  'range': [(0, 255)],
                                  'enums': [(0, 'Optical linear'),
                                            (1, 'Square law'),
                                            (2, 'Inverse square law'),
                                            (3, 'S-curve')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the dimmer curve',
       'value': 0x8310},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'focus_tracking',
                                   'type': 'uint8',
                                   'enums': [(0, 'Focus tracking off'),
                                             (1, 'Focus tracking range is near'),
                                             (2, 'Focus tracking range is medium'),
                                             (3, 'Focus tracking range is far')],
                                 }]},
       'get_sub_device_range': 0,
       'name': 'FOCUS_TRACKING',
       'set_request': {'items': [{'name': 'focus_tracking',
                                  'type': 'uint8',
                                  'enums': [(0, 'Focus tracking off'),
                                            (1, 'Focus tracking range is near'),
                                            (2, 'Focus tracking range is medium'),
                                            (3, 'Focus tracking range is far')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Controls the focus tracking mode when controlling the '
                 "fixture's zoom and focus via its DMX protocol."),
       'value': 0x8311},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'display_auto_off',
                                   'type': 'uint8',
                                   'enums': [(0, 'Display is always on'),
                                             (1, 'Display off after 2 minutes'),
                                             (2, 'Display off after 5 minutes'),
                                             (3, 'Display off after 10 minutes')],
                                 }]},
       'get_sub_device_range': 0,
       'name': 'DISPLAY_AUTO_OFF',
       'set_request': {'items': [{'name': 'display_auto_off',
                                  'type': 'uint8',
                                  'enums': [(0, 'Display is always on'),
                                            (1, 'Display off after 2 minutes'),
                                            (2, 'Display off after 5 minutes'),
                                            (3, 'Display off after 10 minutes')],
                                }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': ('Controls the focus tracking mode when controlling the '
                 "fixture's zoom and focus via its DMX protocol."),
       'value': 0x8312},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'lamp_preheat_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'LAMP_PREHEAT_ENABLE',
       'set_request': {'items': [{'name': 'lamp_preheat_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if lamp pre-heating is on.',
       'value': 0x8313},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'preheat_value',
                                   'type': 'uint8',
                                   'range': [(0, 20)],
                                 }]},
       'get_sub_device_range': 0,
       'name': 'LAMP_PREHEAT_VALUE',
       'set_request': {'items': [{'name': 'preheat_value',
                                  'type': 'uint8',
                                  'range': [(0, 20)],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the lamp pre-heat value as a percentage.',
       'value': 0x8314},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'economy_mode_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'LAMP_POWER_ENABLE',
       'set_request': {'items': [{'name': 'economy_mode_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if economy mode is on.',
       'value': 0x8315},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'lamp_power_value',
                                   'type': 'uint8',
                                   'range': [(70, 100)],
                                }]},
       'get_sub_device_range': 0,
       'name': 'LAMP_POWER_VALUE',
       'set_request': {'items': [{'name': 'lamp_power_value',
                                  'type': 'uint8',
                                  'range': [(70, 100)],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the lamp power value as a percentage.',
       'value': 0x8316},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'iris_blackout_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'IRIS_BLACKOUT_ENABLE',
       'set_request': {'items': [{'name': 'iris_blackout_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if iris blackout mode is enabled.',
       'value': 0x8317},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'color_wheel_blackout_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'COLOR_WHEEL_BLACKOUT_ENABLE',
       'set_request': {'items': [{'name': 'color_wheel_blackout_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if color wheel blackout mode is enabled.',
       'value': 0x8318},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'studio_mode',
                                   'type': 'uint8',
                                   'enums': [(0, 'Disabled'),
                                             (1, 'Enabled'),
                                             (2, 'Silent Mode')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'STUDIO_MODE',
       'set_request': {'items': [{'name': 'studio_mode',
                                  'type': 'uint8',
                                  'enums': [(0, 'Disabled'),
                                            (1, 'Enabled'),
                                            (2, 'Silent Mode')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls studio mode is enabled.',
       'value': 0x8319},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'block_temperature_setting',
                                   'type': 'uint8',
                                   'enums': [(0, 'Low'),
                                             (1, 'Normal'),
                                             (2, 'High')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'BLOCK_TEMP_SETTING',
       'set_request': {'items': [{'name': 'block_temperature_setting',
                                  'type': 'uint8',
                                  'enums': [(0, 'Low'),
                                            (1, 'Normal'),
                                            (2, 'High')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the setting for the block temperature.',
       'value': 0x831a},


      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'mode',
                                   'type': 'uint8',
                                   'enums': [(0, 'Normal'),
                                             (1, 'Fast'),
                                             (2, 'Slow')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'PAN_TILT_SPEED',
       'set_request': {'items': [{'name': 'mode',
                                  'type': 'uint8',
                                  'enums': [(0, 'Normal'),
                                            (1, 'Fast'),
                                            (2, 'Slow')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the pan/tilt speed.',
       'value': 0x8400},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'PAN_TILT_MOVE_ON_RESET_ENABLE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if the fixture will pan and tilt when performing an effect reset',
       'value': 0x8401},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'PAN_TILT_LIMITATION_ENABLE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if pan/tilt limits are enabled.',
       'value': 0x8402},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'pan_minimum', 'type': 'int16', 'range':  [(0, 360)]}]},
       'get_sub_device_range': 0,
       'name': 'PAN_LIMITATION_MINIMUM',
       'set_request': {'items': [{'name': 'pan_minimum', 'type': 'int16', 'range': [(0, 360)]}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the minimum pan limit.',
       'value': 0x8403},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'pan_maximum', 'type': 'int16', 'range':  [(0, 360)]}]},
       'get_sub_device_range': 0,
       'name': 'PAN_LIMITATION_MAXIMUM',
       'set_request': {'items': [{'name': 'pan_maximum', 'type': 'int16', 'range': [(0, 360)]}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the maximum pan limit.',
       'value': 0x8404},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'tilt_minimum', 'type': 'int16', 'range': [(-134, 134)]}]},
       'get_sub_device_range': 0,
       'name': 'TILT_LIMITATION_MINIMUM',
       'set_request': {'items': [{'name': 'tilt_minimum', 'type': 'int16', 'range': [(-134, 134)]}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the minimum tilt limit.',
       'value': 0x8405},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'tilt_maximum', 'type': 'int16', 'range': [(-134, 134)]}]},
       'get_sub_device_range': 0,
       'name': 'TILT_LIMITATION_MAXIMUM',
       'set_request': {'items': [{'name': 'tilt_maximum', 'type': 'int16', 'range': [(-134, 134)]}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the maximum tilt limit.',
       'value': 0x8406},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'mode',
                                   'type': 'uint8',
                                   'enums': [(0, 'Inside limits'),
                                             (1, 'Outside limits')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'PAN_TILT_LIMITATION_AREA',
       'set_request': {'items': [{'name': 'mode',
                                  'type': 'uint8',
                                  'enums': [(0, 'Inside limits'),
                                            (1, 'Outside limits')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls if the pan/tilt range is inside or outside the limits.',
       'value': 0x8407},

      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'FOLLOW_SPOT_MODE_ENABLE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Used to enable the follow spot feature.',
       'value': 0x8500},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'locked', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'FOLLOW_SPOT_MODE_LOCK_TOGGLE',
       'set_request': {'items': [{'name': 'locked', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Used to toggle the follow spot lock',
       'value': 0x8501},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'locked', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'FOLLOW_SPOT_MODE_LOCK_PAN',
       'set_request': {'items': [{'name': 'locked', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the pan lock for follow spot mode.',
       'value': 0x8502},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'locked', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'FOLLOW_SPOT_MODE_LOCK_TILT',
       'set_request': {'items': [{'name': 'locked', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the tilt lock for follow spot mode.',
       'value': 0x8503},
#      {'get_request': {'items': [{'name': 'string_number', 'type': 'uint16'}]},
#       'get_response': {'items': [{'name': 'string_number', 'type': 'uint16'},
#                                  {'name': 'string_length', 'type': 'uint16'},
#                                  {'name': 'multiplier', 'type': 'uint16'},
#                                  {'name': 'dmx_start_address', 'type': 'uint16'},
#                                ]},
#       'get_sub_device_range': 0,
#       'name': 'NODE_GENERAL_SETUP',
#       'set_request': {'items': [{'name': 'string_number', 'type': 'uint16'},
#                                 {'name': 'string_length', 'type': 'uint16'},
#                                 {'name': 'multiplier', 'type': 'uint16'},
#                                 {'name': 'dmx_start_address', 'type': 'uint16'},
#                                ]},
#       'set_response': {'items': []},
#       'set_sub_device_range': 0,
#       'link': '',
#       'notes': 'Get or set the general settings for a node.',
#       'value': 0x8601},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'regulate_fan_speed', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'REGULATE_LAMP_FAN',
       'set_request': {'items': [{'name': 'regulate_fan_speed', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Regulate the lamp fan speed.',
       'value': 0x8600},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'regulate_fan_speed', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'REGULATE_GOBO_FAN',
       'set_request': {'items': [{'name': 'regulate_fan_speed', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Regulate the gobo fan speed.',
       'value': 0x8601},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'cooling_level',
                                   'type': 'uint8',
                                   'enums': [(0, '50%'),
                                             (1, '80%')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'LAMP_COOLING',
       'set_request': {'items': [{'name': 'cooling_level',
                                  'type': 'uint8',
                                  'enums': [(0, '50%'),
                                            (1, '80%')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the lamp cooling level.',
       'value': 0x8602},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'fan_clean_mode',
                                   'type': 'uint8',
                                   'enums': [(0, 'Off'),
                                             (1, 'Auto'),
                                             (2, 'Forced')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'FAN_CLEAN',
       'set_request': {'items': [{'name': 'fan_clean_mode',
                                  'type': 'uint8',
                                  'enums': [(0, 'Off'),
                                            (1, 'Auto'),
                                            (2, 'Forced')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Set the fan cleaning mode.',
       'value': 0x8603},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'fan_mode',
                                   'type': 'uint8',
                                   'enums': [(0, 'Normal'),
                                             (1, 'Silent'),
                                             (2, 'Full'),
                                             (3, 'Regulated')],
                                  }]},
       'get_sub_device_range': 0,
       'name': 'FAN_MODE',
       'set_request': {'items': [{'name': 'fan_mode',
                                  'type': 'uint8',
                                  'enums': [(0, 'Normal'),
                                            (1, 'Silent'),
                                            (2, 'Full'),
                                            (3, 'Regulated')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Set the fan mode.',
       'value': 0x8604},
      {'name': 'SERIAL_NUMBER',
       'get_request': {'items': []},
       'get_response': {'items': [{'name': 'serial', 'type': 'string', 'max_size': 32,}]},
       'get_sub_device_range': 0,
       'link': '',
       'notes': 'Get the serial number for the device.',
       'value': 0x8700},
      {'name': 'EVENT_LOG_USER_EVENT_TRIGGER',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Triggers the addition of dynamic content to the event log.',
       'value': 0x8702},
    ],
  },
  {'id': 0x7a70,
   'name': 'Open Lighting',
   'pids': [
      {'name': 'SERIAL_NUMBER',
       'set_request': {'items': [{'name': 'serial_number', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://opendmx.net/index.php/Open_Lighting_PIDs',
       'notes': 'Sets the serial number (UID) of the device.',
       'value': 0x8000},
    ],
  },
  {'id': 21324,
   'name': 'Soundlight',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'mode', 'type': 'uint8'}]},
       'get_sub_device_range': 2,
       'name': 'DMX_HOLD_MODE',
       'set_request': {'items': [{'name': 'mode', 'type': 'uint8', 'enums': [
                          (0, 'Outputs to 0%'), (1, 'Output to 100%'),
                          (2, 'Hold'), (3, 'Go to predefined scene')],
                        }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Controls the behavior of the device when the signal fails.',
       'value': 0x80f1},
     {'get_request': {'items': [{'name': 'slot_number', 'type': 'uint16'}]},
      'get_response': {'items': [{'name': 'slot_number', 'type': 'uint16'},
                                 {'name': 'name', 'max_size': 16, 'type': 'string'}]},
      'get_sub_device_range': 2,
      'set_request': {'items': [{'name': 'slot_number', 'type': 'uint16'},
                                 {'name': 'name', 'max_size': 16, 'type': 'string'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'name': 'SLOT_LABELS',
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Sets the description (label) for a DMX512 slot.',
       'value': 0x8121},
      {'get_request': {'items': [{'name': 'sensor_number', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                                  {'name': 'type', 'type': 'uint8'},
                                  {'name': 'unit', 'type': 'uint8'},
                                  {'name': 'prefix', 'type': 'uint8'},
                                  {'name': 'range_min', 'type': 'uint16'},
                                  {'name': 'range_max', 'type': 'uint16'},
                                  {'name': 'normal_min', 'type': 'uint16'},
                                  {'name': 'normal_max', 'type': 'uint16'},
                                  {'name': 'supports_recording',
                                   'type': 'uint8'},
                                  {'name': 'name',
                                   'max_size': 20,
                                   'type': 'string'}]},
       'get_sub_device_range': 2,
       'set_request': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                                 {'name': 'type', 'type': 'uint8'},
                                 {'name': 'unit', 'type': 'uint8'},
                                 {'name': 'prefix', 'type': 'uint8'},
                                 {'name': 'range_min', 'type': 'uint16'},
                                 {'name': 'range_max', 'type': 'uint16'},
                                 {'name': 'normal_min', 'type': 'uint16'},
                                 {'name': 'normal_max', 'type': 'uint16'},
                                 {'name': 'supports_recording',
                                  'type': 'uint8'},
                                 {'name': 'name',
                                  'max_size': 20,
                                  'type': 'string'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 2,
       'name': 'MODIFY_SENSOR_DEFINITION',
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Used for setting a sensor definition for devices with variable sensor input. The SENSOR_DEFINITION PID in the E1.20 standard can read a sensor standard definition only, but not set.',
       'value': 0x8200},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'scale_value', 'type': 'uint8'}]},
       'get_sub_device_range': 2,
       'name': 'DC_CALIBRATION',
       'set_request': {'items': [{'name': 'scale_value', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'With the parameters, the outputs can be scaled to the desired maximum value',
       'value': 0xdcca},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'ip_address', 'type': 'uint32'}]},
       'get_sub_device_range': 2,
       'name': 'NETWORK_ADDRESS',
       'set_request': {'items': [{'name': 'ip_address', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Get / Set the IP Address',
       'value': 0x8801},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'net_mask', 'type': 'uint32'}]},
       'get_sub_device_range': 2,
       'name': 'NETWORK_MASK',
       'set_request': {'items': [{'name': 'net_mask', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Get / Set the subnet mask',
       'value': 0x8802},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'gateway_address', 'type': 'uint32'}]},
       'get_sub_device_range': 2,
       'name': 'GATEWAY_ADDRESS',
       'set_request': {'items': [{'name': 'gateway_address', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Get / Set the address of the default gateway.',
       'value': 0x8803},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'dns_address', 'type': 'uint32'}]},
       'get_sub_device_range': 2,
       'name': 'DNS_ADDRESS',
       'set_request': {'items': [{'name': 'dns_address', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Get / Set the address of the DNS server.',
       'value': 0x8804},
      {'get_request': {'items': []},
       'get_response': {'items': [{'type': 'group',
                                   'name': 'dc_offsets',
                                   'items': [{'name': 'offset_value', 'type': 'uint8'}]
                        }]},
       'get_sub_device_range': 2,
       'name': 'DC_OFFSET',
       'set_request': {'items': [{'type': 'group',
                                  'name': 'dc_offsets',
                                  'items': [{'name': 'offset_value', 'type': 'uint8'}]
                        }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'With the parameters, the offset adjustment of the outputs are set to the desired value. It is transmitted as many values as outputs must be set. The number is determined by the parameters length (PDL).  The offset input is especially useful when driving LEDs with a different starting point',
       'value': 0xdc0e},
      {'name': 'DC_FADER_OFFSET',
        'set_request': {'items': [{'type': 'group',
                                   'name': 'offsets',
                                   'items': [{'name': 'offset_value', 'type': 'uint8'}]
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'With the parameters, the offset adjustment of the outputs are set to the desired value. The values are collected directly from the DMX input (the last valid zero weather package). There are are as many values as outputs must be set. The acquisition is initiated by the command. A reading is possible with the function DC_OFFSET. ',
       'value': 0xdc0f},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'curve_number', 'type': 'uint8'},
                          {'name': 'total_curves', 'type': 'uint8'},
                          {'name': 'segment_count', 'type': 'uint8'},
                          {'name': 'interpolation_method', 'type': 'uint8',
                           'enums': [(0, 'Step'), (1, 'Linear'), (2, 'Square'), (3, 'Cubic')],
                          },
                          {'name': 'start_value', 'type': 'uint8'},
                          {'name': 'curve_values',
                           'type': 'group',
                           'items': [
                             {'name': 'value', 'type': 'uint8'},
                           ],
                          },
                        ]},
       'get_sub_device_range': 2,
       'name': 'CURVE_DEFINITION',
       'set_request': {'items': [
                         {'name': 'curve_number', 'type': 'uint8'},
                         {'name': 'total_curves', 'type': 'uint8'},
                         {'name': 'segment_count', 'type': 'uint8'},
                         {'name': 'interpolation_method', 'type': 'uint8',
                          'enums': [(0, 'Step'), (1, 'Linear'), (2, 'Square'), (3, 'Cubic')],
                         },
                         {'name': 'start_value', 'type': 'uint8'},
                         {'name': 'curve_values',
                          'type': 'group',
                          'items': [
                            {'name': 'value', 'type': 'uint8'},
                          ],
                         },
                       ]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'The number of values supplied needs to match what\' specified in the segment_count field',
       'value': 0xdccd},
   ]
  },
  {'id': 0x4c55,
   'name': 'Lumen Radio',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'enabled', 'type': 'bool'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'FULL_DISCOVERY',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Starts full RDM discovery.',
       'value': 0x8000},
      # 0x8001 exists but we can't get a description for it
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'dmx_level', 'type': 'uint8'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'OUTPUT_DEFAULT_VALUE',
       'set_request': {'items': [{'name': 'dmx_level', 'type': 'uint8'}]},
       'set_response': {'items': [{'name': 'dmx_level', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Sets the output level to use when there is no DMX signal',
       'value': 0x8002},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'fade_time', 'type': 'uint8'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'DALI_FADE_TIME',
       'set_request': {'items': [{'name': 'fade_time', 'type': 'uint8'}]},
       'set_response': {'items': [{'name': 'fade_time', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Sets the DALI fade time.',
       'value': 0x8003},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'interval', 'type': 'uint16',
                           'multiplier': -1},
                        ]},
       'get_sub_device_range': 0,
       'name': 'INCREMENTAL_DISCOVERY_INTERVAL',
       'set_request': {'items': [{'name': 'interval', 'type': 'uint16',
                                  'range': [(0x101, 0xffff)],
                                  'multiplier': -1,
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the frequency at which incremental discovery runs.',
       'value': 0x8101},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'timer_factor', 'type': 'uint16'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'ACK_TIMER_FACTOR',
       'set_request': {'items': [{'name': 'timer_factor', 'type': 'uint16',
                                  'range': [(0x101, 0xffff)],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Unknown.',
       'value': 0x8102},
    ],
  },
  {'id': 0x6574,
   'name': 'ETC',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'curve_setting',
                           'type': 'uint8',
                           'enums': [(0, 'Standard'),
                                     (1, 'Incandescent'),
                                     (2, 'Linear Response'),
                                     (3, 'Quick Curve (No Smoothing)')],
                        }]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_CURVE',
       'set_request': {'items': [{'name': 'curve_setting', 'type': 'uint8',
                                  'enums': [(0, 'Standard'),
                                            (1, 'Incandescent'),
                                            (2, 'Linear Response'),
                                            (3, 'Quick Curve (No Smoothing)')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the LED response curve.',
       'value': 0x8101},
      {'get_request': {'items': [{'name': 'curve', 'type': 'uint8',}]},
       'get_response': {'items': [{'name': 'curve_number', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_CURVE_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a LED response curve.',
       'value': 0x8102},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'strobe_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_STROBE',
       'set_request': {'items': [{'name': 'strobe_enabled', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Enable/Disable the strobe feature.',
       'value': 0x8103},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'output_mode',
                           'type': 'uint8',
                           'enums': [(0, 'Regulated mode, droop com, LEDs dim at high temps'),
                                     (1, 'Boost mode, no droop comp, LEDs dim at high temps'),
                                     (2, 'Protected mode, LEDs are always dim to prevent overtemp.')],
                        }]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_OUTPUT_MODE',
       'set_request': {'items': [{'name': 'output_mode', 'type': 'uint8',
                                  'enums': [(0, 'Regulated'), (1, 'Boost'), (2, 'Protected')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the LED Output Mode',
       'value': 0x8104},
      {'get_request': {'items': [{'name': 'output_mode', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'output_mode', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_OUTPUT_MODE_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a LED output mode.',
       'value': 0x8105},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'red_shift_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_RED_SHIFT',
       'set_request': {'items': [{'name': 'red_shift_enabled', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Enable/Disable the Red Shift Effect.',
       'value': 0x8106},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'white_point', 'type': 'uint8',
                                   'enums': [(0, '2950K'), (1, '3200K'), (2, '5600K'), (3, '6500K')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_WHITE_POINT',
       'set_request': {'items': [{'name': 'white_point', 'type': 'uint8',
                                  'enums': [(0, '2950K'), (1, '3200K'), (2, '5600K'), (3, '6500K')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the white point',
       'value': 0x8107},
      {'get_request': {'items': [{'name': 'white_point', 'type': 'uint8',}]},
       'get_response': {'items': [{'name': 'white_point', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_WHITE_POINT_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a given white point.',
       'value': 0x8108},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'frequency', 'type': 'uint16'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_FREQUENCY',
       'set_request': {'items': [{'name': 'frequency', 'type': 'uint16', 'range': [(900, 1500)]}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the LED output frequency',
       'value': 0x8109},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'loss_behavior', 'type': 'uint8',
                                   'enums': [(0, 'Instant go dark.'), (1, 'Hold for 2 mins'), (2, 'Hold forever')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_DMX_LOSS_BEHAVIOR',
       'set_request': {'items': [{'name': 'loss_behavior', 'type': 'uint8',
                                  'enums': [(0, 'Instant go dark.'), (1, 'Hold for 2 mins'), (2, 'Hold forever')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Control the behavior when the DMX512 signal is lost.',
       'value': 0x810a},
      {'get_request': {'items': [{'name': 'loss_behavior', 'type': 'uint8',}]},
       'get_response': {'items': [{'name': 'loss_behavior', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_DMX_LOSS_BEHAVIOR_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a DMX512 loss mode.',
       'value': 0x810b},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'plus_seven_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_PLUS_SEVEN',
       'set_request': {'items': [{'name': 'plus_seven_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Enable/Disable the Plus Seven Control.',
       'value': 0x810c},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'backlight_brightness', 'type': 'uint8'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_BACKLIGHT_BRIGHTNESS',
       'set_request': {'items': [{'name': 'backlight_brightness', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Control the brightness of the LCD backlight.',
       'value': 0x810d},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'backlight_timeout', 'type': 'uint8',
                                   'enums': [(0, 'Never'), (1, '30 seconds'),
                                             (2, '1 minute'), (3, '5 minutes'),
                                             (4, '15 minutes')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_BACKLIGHT_TIMEOUT',
       'set_request': {'items': [{'name': 'backlight_timeout', 'type': 'uint8',
                                  'enums': [(0, 'Never'), (1, '30 seconds'),
                                            (2, '1 minute'), (3, '5 minutes'),
                                            (4, '15 minutes')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Control the timeout for the LCD backlight.',
       'value': 0x810e},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'status_indicators', 'type': 'bool'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_STATUS_INDICATORS',
       'set_request': {'items': [{'name': 'status_indicators', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Enable/Disable the status indicators.',
       'value': 0x810f},
      {'name': 'ETC_RECALIBRATE_FIXTURE',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Recalibrate the fixture',
       'value': 0x8110},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'over_temperature_mode', 'type': 'uint8',
                                   'enums': [(0, 'Dark'), (1, 'Red')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_OVER_TEMP_MODE',
       'set_request': {'items': [{'name': 'over_temperature_mode', 'type': 'uint8',
                                  'enums': [(0, 'Dark'), (1, 'Red')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the over temperature mode.',
       'value': 0x8111},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'quick_setup_mode', 'type': 'uint8',
                                   'enums': [(0, 'General Use'), (1, 'State Setup'),
                                             (2, 'Architectural Setup'), (3, 'Effects Setup'),
                                             (4, 'Studio Setup'), (5, 'Advanced Setup')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_SIMPLE_SETUP_MODE',
       'set_request': {'items': [{'name': 'quick_setup_mode', 'type': 'uint8',
                                  'enums': [(0, 'General Use'), (1, 'State Setup'),
                                            (2, 'Architectural Setup'), (3, 'Effects Setup'),
                                            (4, 'Studio Setup'), (5, 'Advanced Setup')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the simple setup mode.',
       'value': 0x8112},

      {'get_request': {'items': [{'name': 'strobe_number', 'type': 'uint8',}]},
       'get_response': {'items': [{'name': 'strobe_number', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_STROBE_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a strobe value.',
       'value': 0x8113},
      {'get_request': {'items': [{'name': 'red_shift_value', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'red_shift_value', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_RED_SHIFT_DESCRIPTION',
       'link': '',
       'notes': 'Get a text description of a given Red Shift value.',
       'value': 0x8114},
      {'get_request': {'items': [{'name': 'plus_seven_mode', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'plus_seven_mode', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_PLUS_SEVEN_DESCRIPTION',
       'link': '',
       'notes': 'Get a text description for a plus seven value.',
       'value': 0x8115},
      {'get_request': {'items': [{'name': 'backlight_timeout', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'backlight_timeout', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_BACKLIGHT_TIMEOUT_DESCRIPTION',
       'link': '',
       'notes': 'Get a text description for a backlight timeout value.',
       'value': 0x8116},
      {'get_request': {'items': [{'name': 'simple_setup_mode', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'simple_setup_mode', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_SIMPLE_SETUP_MODE_DESCRIPTION',
       'link': '',
       'notes': 'Get a text description for a simple setup mode.',
       'value': 0x8117},
      {'name': 'ETC_PREPARE_FOR_SOFTWARE_DOWNLOAD',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Prepare the unit for software download.',
       'value': 0xf000},
    ],
  },
]


ESTA_PIDS = [
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'description',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_MODEL_DESCRIPTION',
  'value': 128},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'MANUFACTURER_LABEL',
  'value': 129},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_LABEL',
  'set_request': {'items': [{'name': 'label',
                             'max_size': 32,
                             'type': 'string'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 130},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'state',
                              'type': 'uint8',
                              'enums': [(0, 'Off'), (1, 'On'), (2, 'Strike'), (3, 'Standby'), (4, 'Not Present'), (0x7f, 'Error')],
                              'range': [(0, 4), (0x7f, 0xDF)],
                  }]},
  'get_sub_device_range': 2,
  'name': 'LAMP_STATE',
  'set_request': {'items': [{'name': 'state', 'type': 'uint8',
                  'enums': [(0, 'Off'), (1, 'On'), (2, 'Strike'), (3, 'Standby')],
                  'range': [(0, 3), (0x80, 0xDF)],
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1027},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'mode',
                              'type': 'uint8',
                              'enums': [(0, 'Off'), (1, 'DMX'), (2, 'On'), (3, 'On After Calibration')],
                              'range': [(0, 3), (0x80, 0xDF)],
                            }]},
  'get_sub_device_range': 2,
  'name': 'LAMP_ON_MODE',
  'set_request': {'items': [{'name': 'mode', 'type': 'uint8',
                  'enums': [(0, 'Off'), (1, 'DMX'), (2, 'On'), (3, 'On After Calibration')],
                  'range': [(0, 3), (0x80, 0xDF)],
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1028},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'power_cycles', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_POWER_CYCLES',
  'set_request': {'items': [{'name': 'power_cycles', 'type': 'uint32'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1029},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'identify_state', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'IDENTIFY_DEVICE',
  'set_request': {'items': [{'name': 'identify_state', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4096},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'version', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'BOOT_SOFTWARE_VERSION',
  'value': 193},
 {'name': 'RECORD_SENSORS',
  'set_request': {'items': [{'name': 'sensor_number', 'type': 'uint8',
                             'range': [(0, 0xff)],
                             'enums': [(0xff, 'All Sensors')],
                 }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 514},
 {'get_request': {'items': []},
  'get_response': {'items': [{'type': 'group',
                              'name': 'uids',
                              'items': [{'name': 'manufacturer_id', 'type': 'uint16'},
                                        {'name': 'device_id', 'type': 'uint32'}],
                   }]},
  'get_sub_device_range': 0,
  'name': 'PROXIED_DEVICES',
  'value': 16},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'device_count', 'type': 'uint16'},
                             {'name': 'list_changed', 'type': 'bool'}]},
  'get_sub_device_range': 0,
  'name': 'PROXIED_DEVICE_COUNT',
  'value': 17},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'year', 'type': 'uint16'},
                             {'name': 'month', 'type': 'uint8'},
                             {'name': 'day', 'type': 'uint8'},
                             {'name': 'hour', 'type': 'uint8'},
                             {'name': 'minute', 'type': 'uint8'},
                             {'name': 'second', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'REAL_TIME_CLOCK',
  'set_request': {'items': [{'name': 'year', 'type': 'uint16', 'range': [(2003, 65535)]},
                    {'name': 'month', 'type': 'uint8', 'range': [(1, 12)]},
                    {'name': 'day', 'type': 'uint8', 'range': [(1, 31)]},
                    {'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                    {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                    {'name': 'second', 'type': 'uint8', 'range': [(0, 60)]}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1539},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'short_message', 'type': 'uint16'},
                             {'name': 'length_mismatch', 'type': 'uint16'},
                             {'name': 'checksum_fail', 'type': 'uint16'}]},
  'get_sub_device_range': 0,
  'name': 'COMMS_STATUS',
  'set_request': {'items': []},
  'set_response': {'items': []},
  'set_sub_device_range': 0,
  'value': 21},
 {'get_request': {'items': [{'name': 'sensor_number', 'type': 'uint8',
                             'range': [(0, 0xfe)],
                 }]},
  'get_response': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                             {'name': 'type', 'type': 'uint8'},
                             {'name': 'unit', 'type': 'uint8'},
                             {'name': 'prefix', 'type': 'uint8'},
                             {'name': 'range_min', 'type': 'int16',
                              'enums': [(-32768, 'Undefined')],
                              'range': [(-32768, 32767)]
                             },
                             {'name': 'range_max', 'type': 'int16',
                              'enums': [(32767, 'Undefined')],
                              'range': [(-32767, 32767)]
                             },
                             {'name': 'normal_min', 'type': 'int16',
                              'enums': [(-32768, 'Undefined')],
                              'range': [(-32768, 32767)]
                             },
                             {'name': 'normal_max', 'type': 'int16',
                              'enums': [(32767, 'Undefined')],
                              'range': [(-32768, 32767)]
                             },
                             {'name': 'supports_recording',
                              'type': 'uint8'},
                             {'name': 'name',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'SENSOR_DEFINITION',
  'value': 512},
 {'get_request': {'items': [{'name': 'status_type', 'type': 'uint8', 'enums': [
                    (1, 'Last Message'), (2, 'Advisory'),
                    (3, 'Warning'), (4, 'Error')]
                   }]},
  'get_response': {'items': []},
  'get_sub_device_range': 0,
  'name': 'QUEUED_MESSAGE',
  'value': 32},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'language',
                              'max_size': 2,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'LANGUAGE',
  'set_request': {'items': [{'name': 'language',
                             'max_size': 2,
                             'type': 'string'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 176},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'slot_values',
                              'type': 'group',
                              'items': [{'name': 'slot_offset', 'type': 'uint16'},
                                        {'name': 'default_slot_value', 'type': 'uint8'}]
                  }]},
  'get_sub_device_range': 2,
  'name': 'DEFAULT_SLOT_VALUE',
  'value': 290},
 {'name': 'RESET_DEVICE',
  'set_request': {'items': [{'name': 'reset_mode', 'type': 'uint8', 'enums': [
                    (1, 'Warm'), (0xff, 'Cold')]
                 }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4097},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'hours', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_HOURS',
  'set_request': {'items': [{'name': 'hours', 'type': 'uint32'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1024},
 {'name': 'CAPTURE_PRESET',
  'set_request': {'items': [
    {'name': 'scene', 'type': 'uint16', 'range': [(0x1, 0xfffe)]},
    {'name': 'fade_up_time', 'type': 'uint16', 'multiplier': -1,},
    {'name': 'fade_down_time', 'type': 'uint16', 'multiplier': -1,},
    {'name': 'wait_time', 'type': 'uint16', 'multiplier': -1}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4144},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'dmx_address', 'type': 'uint16'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_START_ADDRESS',
  'set_request': {'items': [{'name': 'dmx_address', 'type': 'uint16', 'range': [
                    (1, 512)],
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 240},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'invert_status', 'type': 'uint8',
                              'enums': [(0, 'Off'), (1, 'On'), (2, 'Auto')]}]},
  'get_sub_device_range': 2,
  'name': 'DISPLAY_INVERT',
  'set_request': {'items': [{'name': 'invert_status', 'type': 'uint8',
                             'enums': [(0, 'Off'), (1, 'On'), (2, 'Auto')]
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1280},
 {'get_request': {'items': [{'name': 'status_type', 'type': 'uint8', 'enums': [
                    (0, 'None'), (1, 'Last Message'), (2, 'Advisory'),
                    (3, 'Warning'), (4, 'Error')]
                   }]},
  'get_response': {'items': [{'type': 'group',
                              'name': 'messages',
                              'items': [{'name': 'sub_device', 'type': 'uint16'},
                                        {'name': 'status_type', 'type': 'uint8'},
                                        {'name': 'message_id', 'type': 'uint16'},
                                        {'name': 'value1', 'type': 'int16'},
                                        {'name': 'value2', 'type': 'int16'}],
                  }]},
  'get_sub_device_range': 0,
  'name': 'STATUS_MESSAGE',
  'value': 48},
 {'get_request': {'items': [{'name': 'status_id', 'type': 'uint16'}]},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 0,
  'name': 'STATUS_ID_DESCRIPTION',
  'value': 49},
 {'name': 'CLEAR_STATUS_ID',
  'set_request': {'items': []},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 50},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'status_type', 'type': 'uint8'}]},
  'get_sub_device_range': 3,
  'name': 'SUB_DEVICE_STATUS_REPORT_THRESHOLD',
  'set_request': {'items': [{'name': 'status_type', 'type': 'uint8', 'enums': [
                    (0, 'None'), (2, 'Advisory'), (3, 'Warning'), (4, 'Error')]
                   }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 51},
 {'get_request': {'items': [{'name': 'sensor_number', 'type': 'uint8',
                             'range': [(0, 0xfe)],
                  }]},
  'get_response': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                             {'name': 'present_value', 'type': 'int16'},
                             {'name': 'lowest', 'type': 'int16'},
                             {'name': 'highest', 'type': 'int16'},
                             {'name': 'recorded', 'type': 'int16'}]},
  'get_sub_device_range': 2,
  'name': 'SENSOR_VALUE',
  'set_request': {'items': [{'name': 'sensor_number',
                             'type': 'uint8',
                             'range': [(0, 0xff)],
                             'enums': [(0xff, 'All Sensors')],
                 }]},
  'set_response': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                             {'name': 'present_value', 'type': 'uint16'},
                             {'name': 'lowest', 'type': 'uint16'},
                             {'name': 'highest', 'type': 'uint16'},
                             {'name': 'recorded', 'type': 'uint16'}]},
  'set_sub_device_range': 1,
  'value': 513},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'invert', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'PAN_INVERT',
  'set_request': {'items': [{'name': 'invert', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1536},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'SOFTWARE_VERSION_LABEL',
  'value': 192},
 {'get_request': {'items': []},
  'get_response': {'items': [{'type': 'group',
                              'name': 'languages',
                              'items': [{'name': 'language',
                                         'max_size': 2,
                                         'min_size': 2,
                                         'type': 'string'}],
                  }]},
  'get_sub_device_range': 2,
  'name': 'LANGUAGE_CAPABILITIES',
  'value': 160},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'BOOT_SOFTWARE_LABEL',
  'value': 194},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'hours', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'LAMP_HOURS',
  'set_request': {'items': [{'name': 'hours', 'type': 'uint32'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1025},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'mode', 'type': 'uint16',
                              'enums': [(0, 'Off'), (0xffff, 'All')],
                              'range': [(0, 0xffff)]},
                             {'name': 'level', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'PRESET_PLAYBACK',
  'set_request': {'items': [{'name': 'mode', 'type': 'uint16',
                             'enums': [(0, 'Off'), (0xffff, 'All')],
                             'range': [(0, 0xffff)]},
                            {'name': 'level', 'type': 'uint8'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4145},
 {'get_request': {'items': [{'name': 'personality', 'type': 'uint8', 'range': [
                    (1, 0xff)]
                  }]},
  'get_response': {'items': [{'name': 'personality', 'type': 'uint8'},
                             {'name': 'slots_required', 'type': 'uint16'},
                             {'name': 'name',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_PERSONALITY_DESCRIPTION',
  'value': 225},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DISPLAY_LEVEL',
  'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1281},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'current_personality',
                              'type': 'uint8'},
                             {'name': 'personality_count',
                              'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_PERSONALITY',
  'set_request': {'items': [{'name': 'personality', 'type': 'uint8', 'range': [
                    (1, 0xff)]
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 224},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'slots',
                              'type': 'group',
                              'items': [{'name': 'slot_offset', 'type': 'uint16'},
                                        {'name': 'slot_type', 'type': 'uint8'},
                                        {'name': 'slot_label_id', 'type': 'uint16'}],
                   }]},
  'get_sub_device_range': 2,
  'name': 'SLOT_INFO',
  'value': 288},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'params',
                              'type': 'group',
                              'items': [{'name': 'param_id', 'type': 'uint16'}],
                             }]
                  },
  'get_sub_device_range': 2,
  'name': 'SUPPORTED_PARAMETERS',
  'value': 80},
 {'get_request': {'items': [{'name': 'pid', 'type': 'uint16'}]},
  'get_response': {'items': [{'name': 'pid', 'type': 'uint16'},
                             {'name': 'pdl_size', 'type': 'uint8'},
                             {'name': 'data_type', 'type': 'uint8'},
                             {'name': 'command_class', 'type': 'uint8'},
                             {'name': 'type', 'type': 'uint8'},
                             {'name': 'unit', 'type': 'uint8'},
                             {'name': 'prefix', 'type': 'uint8'},
                             {'name': 'min_value', 'type': 'uint32'},
                             {'name': 'max_value', 'type': 'uint32'},
                             {'name': 'default_value', 'type': 'uint32'},
                             {'name': 'description',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 0,
  'name': 'PARAMETER_DESCRIPTION',
  'value': 81},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'invert', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'TILT_INVERT',
  'set_request': {'items': [{'name': 'invert', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1537},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'protocol_major', 'type': 'uint8'},
                             {'name': 'protocol_minor', 'type': 'uint8'},
                             {'name': 'device_model', 'type': 'uint16'},
                             {'name': 'product_category',
                              'type': 'uint16'},
                             {'name': 'software_version',
                              'type': 'uint32'},
                             {'name': 'dmx_footprint', 'type': 'uint16'},
                             {'name': 'current_personality',
                              'type': 'uint8'},
                             {'name': 'personality_count',
                              'type': 'uint8'},
                             {'name': 'dmx_start_address', 'type': 'uint16'},
                             {'name': 'sub_device_count',
                              'type': 'uint16'},
                             {'name': 'sensor_count', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_INFO',
  'value': 96},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'using_defaults', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'FACTORY_DEFAULTS',
  'set_request': {'items': []},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 144},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'strikes', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'LAMP_STRIKES',
  'set_request': {'items': [{'name': 'strikes', 'type': 'uint32'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1026},
 {'get_request': {'items': [{'name': 'test_number', 'type': 'uint8'}]},
  'get_response': {'items': [{'name': 'test_number', 'type': 'uint8'},
                             {'name': 'description',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'SELF_TEST_DESCRIPTION',
  'value': 4129},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'power_state', 'type': 'uint8',
                              'enums': [(0, 'Full Off'), (1, 'Shutdown'), (2, 'Standby'), (0xff, 'Normal')],
                            }]},
  'get_sub_device_range': 2,
  'name': 'POWER_STATE',
  'set_request': {'items': [{'name': 'power_state', 'type': 'uint8', 'enums': [
                    (0, 'Full Off'), (1, 'Shutdown'), (2, 'Standby'),
                    (0xff, 'Normal')]
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4112},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'tests_active', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'PERFORM_SELF_TEST',
  'set_request': {'items': [{'name': 'test_number', 'type': 'uint8',
                  'range': [(0, 0xff)],
                  'enums': [(0, 'Off'), (0xff, 'All')],
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4128},
 {'get_request': {'items': [{'name': 'slot_number', 'type': 'uint16'}]},
  'get_response': {'items': [{'name': 'slot_number', 'type': 'uint16'},
                             {'name': 'name', 'max_size': 32, 'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'SLOT_DESCRIPTION',
  'value': 289},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'detail_ids',
                              'type': 'group',
                              'max_size': 6,
                              'items': [{'name': 'detail_id', 'type': 'uint16'}],
                   }]},
  'get_sub_device_range': 2,
  'name': 'PRODUCT_DETAIL_ID_LIST',
  'value': 112},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'swap', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'PAN_TILT_SWAP',
  'set_request': {
                  'items': [{'name': 'swap', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1538},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'identify_mode', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'IDENTIFY_MODE',
  'set_request': {
                  'items': [{'name': 'identify_mode',
                             'type': 'uint8',
                             'enums': [(0, 'Quiet'), (0xff, 'Loud')],
                            }]
                 },
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7fb0},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'level_field_supported', 'type': 'bool'},
    {'name': 'preset_sequence_supported', 'type': 'bool'},
    {'name': 'split_times_supported', 'type': 'bool'},
    {'name': 'fail_infitite_delay_supported', 'type': 'bool'},
    {'name': 'fail_infitite_hold_supported', 'type': 'bool'},
    {'name': 'startup_infitite_hold_supported', 'type': 'bool'},
    {'name': 'max_scene_number', 'type': 'uint16'},
    {'name': 'min_preset_fade_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_preset_fade_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_preset_wait_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_preset_wait_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_fail_delay_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_fail_delay_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_fail_hold_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_fail_hold_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_startup_delay_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_startup_delay_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_startup_hold_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_startup_hold_time', 'type': 'uint16', 'multiplier': -1},
  ]},
  'get_sub_device_range': 2,
  'name': 'PRESET_INFO',
  'value': 0x7fb1},
 {'get_request': {'items': [
    {'name': 'scene_number', 'type': 'uint16', 'range': [(1, 0xfffe)]},
  ]},
  'get_response': {'items': [
      {'name': 'scene_number', 'type': 'uint16', 'range': [(1, 0xfffe)]},
      {'name': 'up_fade_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'down_fade_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'wait_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'programmed', 'type': 'uint16',
       'enums': [(0, 'Not Programmed'), (1, 'Programmed'), (2, 'Read Only')],
      },
  ]},
  'get_sub_device_range': 2,
  'set_request': {'items': [
      {'name': 'scene_number', 'type': 'uint16', 'range': [(1, 0xfffe)]},
      {'name': 'up_fade_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'down_fade_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'wait_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'clear_preset', 'type': 'bool'},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'name': 'PRESET_STATUS',
  'value': 0x7fb2},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'merge_mode', 'type': 'uint8',
     'enums': [(0, 'Default'), (1, 'HTP'), (2, 'LTP'), (3, 'DMX Only'),
               (0xff, 'Other')],
    },
  ]},
  'get_sub_device_range': 2,
  'set_request': {'items': [
    {'name': 'merge_mode', 'type': 'uint8',
     'enums': [(0, 'Default'), (1, 'HTP'), (2, 'LTP'), (3, 'DMX Only'),
               (0xff, 'Other')],
    },
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'name': 'PRESET_MERGE_MODE',
  'value': 0x7fb3},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'power_on_self_test', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'POWER_ON_SELF_TEST',
  'set_request': {'items': [{'name': 'power_on_self_test', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7fb4},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'sub_device_footprint', 'type': 'uint16'},
    {'name': 'base_dmx_address', 'type': 'uint16'}]},
  'get_sub_device_range': 0,
  'name': 'DMX_BLOCK_ADDRESS',
  'set_request': {'items': [
    {'name': 'base_dmx_address', 'type': 'uint16', 'range': [(1, 512)]}
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 0,
  'value': 0x7ff0},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'scene_number', 'type': 'uint16'},
    {'name': 'loss_of_signal_delay', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'hold_time', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'level', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_FAIL_MODE',
  'set_request': {'items': [
    {'name': 'scene_number', 'type': 'uint16',
     'enums': [(0, 'Fixed Level')],
     'range': [(0, 0xff)],
    },
    {'name': 'loss_of_signal_delay', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'hold_time', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'level', 'type': 'uint8'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff1},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'scene_number', 'type': 'uint16'},
    {'name': 'startup_delay', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'hold_time', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'level', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_STARTUP_MODE',
  'set_request': {'items': [
    {'name': 'scene_number', 'type': 'uint16',
     'enums': [(0, 'Fixed Level')],
     'range': [(0, 0xff)],
    },
    {'name': 'startup_delay', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'hold_time', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'level', 'type': 'uint8'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff2},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'minimum_level_lower', 'type': 'uint16'},
    {'name': 'minimum_level_upper', 'type': 'uint16'},
    {'name': 'maximum_level_lower', 'type': 'uint16'},
    {'name': 'maximum_level_upper', 'type': 'uint16'},
    {'name': 'number_curves_supported', 'type': 'uint8'},
    {'name': 'levels_resolution', 'type': 'uint8',
     'range': [(0, 0x10)],
    },
    {'name': 'split_levels_supported', 'type': 'bool'},
  ]},
  'get_sub_device_range': 2,
  'name': 'DIMMER_INFO',
  'value': 0x7ff3},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'minimum_level_increasing', 'type': 'uint16'},
    {'name': 'minimum_level_decreasing', 'type': 'uint16'},
    {'name': 'on_below_minimum', 'type': 'bool'},
  ]},
  'get_sub_device_range': 2,
  'name': 'MINIMUM_LEVEL',
  'set_request': {'items': [
    {'name': 'minimum_level_increasing', 'type': 'uint16'},
    {'name': 'minimum_level_decreasing', 'type': 'uint16'},
    {'name': 'on_below_minimum', 'type': 'bool'},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff4},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'maximum_level', 'type': 'uint16'},
  ]},
  'get_sub_device_range': 2,
  'name': 'MAXIMUM_LEVEL',
  'set_request': {'items': [
    {'name': 'maximum_level', 'type': 'uint16'},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff5},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'current_curve', 'type': 'uint8'},
    {'name': 'number_curves', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'CURVE',
  'set_request': {'items': [
    {'name': 'curve', 'type': 'uint8', 'range': [(1, 0xff0)]},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff6},
 {'get_request': {'items': [
   {'name': 'curve_number', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'get_response': {'items': [
    {'name': 'curve_number', 'type': 'uint8', 'range': [(1, 0xff)]},
    {'name': 'curve_description', 'type': 'string', 'max_size': 32},
  ]},
  'get_sub_device_range': 2,
  'name': 'CURVE_DESCRIPTION',
  'value': 0x7ff7},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'current_response_time', 'type': 'uint8'},
    {'name': 'number_response_options', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'OUTPUT_RESPONSE_TIME',
  'set_request': {'items': [
    {'name': 'response_time', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff8},
 {'get_request': {'items': [
   {'name': 'response_time', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'get_response': {'items': [
    {'name': 'response_time', 'type': 'uint8', 'range': [(1, 0xff)]},
    {'name': 'response_time_description', 'type': 'string', 'max_size': 32},
  ]},
  'get_sub_device_range': 2,
  'name': 'OUTPUT_RESPONSE_TIME_DESCRIPTION',
  'value': 0x7ff9},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'current_moduluation_frequency', 'type': 'uint8'},
    {'name': 'number_modluation_frequencies', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'MODULATION_FREQUENCY',
  'set_request': {'items': [
    {'name': 'modulation_frequency', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ffa},
 {'get_request': {'items': [
   {'name': 'modulation_frequency', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'get_response': {'items': [
    {'name': 'modulation_frequency', 'type': 'uint8', 'range': [(1, 0xff)]},
    {'name': 'frequency', 'type': 'uint32'},
    {'name': 'modulation_frequence_description', 'type': 'string', 'max_size': 32},
  ]},
  'get_sub_device_range': 2,
  'name': 'MODULATION_FREQUENCY_DESCRIPTION',
  'value': 0x7ffb},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'hours_remaining', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'BURN_IN',
  'set_request': {'items': [
    {'name': 'hours', 'type': 'uint8'},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ffc},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'pin_code', 'type': 'uint16',
     'range': [(0, 0x0270f)],
    },
  ]},
  'get_sub_device_range': 2,
  'name': 'LOCK_PIN',
  'set_request': {'items': [
    {'name': 'new_pin_code', 'type': 'uint16',
     'range': [(0, 0x270f)],
    },
    {'name': 'current_pin_code', 'type': 'uint16',
     'range': [(0, 0x270f)],
    },
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ffd},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'current_lock_state', 'type': 'uint8',
     'enums': [(0, 'Unlocked')],
     'range': [(0, 0xff)],
    },
    {'name': 'number_of_lock_states', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'LOCK_STATE',
  'set_request': {'items': [
    {'name': 'pin_code', 'type': 'uint16', 'range': [(0, 0x270f)]},
    {'name': 'lock_state', 'type': 'uint8',
     'enums': [(0, 'Unlocked')],
     'range': [(0, 0xff)],
    },
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ffe},
 {'get_request': {'items': [
     {'name': 'lock_state', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'get_response': {'items': [
    {'name': 'lock_state', 'type': 'uint8',
     'range': [(1, 0xff)],
    },
    {'name': 'lock_state_description', 'type': 'string', 'max_size': 32},
  ]},
  'get_sub_device_range': 2,
  'name': 'LOCK_STATE_DESCRIPTION',
  'value': 0x7fff},
]
