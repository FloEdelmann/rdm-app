

manufacturers = [
  {'id': 0x00a1,
   'name': 'Creative Lighting',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'mode', 'type': 'uint8', 'enums': [
                            (0, 'DMX512'), (1, 'DALI'), (2, 'DSI')]
                          }
                        ]},
       'get_sub_device_range': 2,
       'name': 'DEVICE_MODE',
       'set_request': {'items': [{'name': 'mode', 'type': 'uint8',
                                  'enums': [(0, 'DMX512'), (1, 'DALI'), (2, 'DSI')]
                      }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.creativelighting.com.au/datasheets/RDM%20Supplement.pdf',
       'notes': 'Controls the operating mode of the device',
       'value': 32768}]
  },
  {'id': 0x4845,
   'name': 'Howard Eaton Lighting',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'enabled', 'type': 'bool'},
                          {'name': 'max_allowed', 'type': 'uint8'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'PWRUP_TEST',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.goddarddesign.com/pdf_doc/rdmlabpack%20srn%20v2p9.pdf',
       'notes': 'Enable/disable the Power On Self Test (POST).',
       'value': 0xc857},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'dmx_nsc_packet_count', 'type': 'uint16'},
                          {'name': 'dmx_asc_packet_count', 'type': 'uint16'},
                          {'name': 'rdm_asc_packet_count', 'type': 'uint16'},
                          {'name': 'uart_errors', 'type': 'uint8'},
                          {'name': 'device_minutes', 'type': 'uint8'},
                          {'name': 'brownout_count', 'type': 'uint8'},
                          {'name': 'watchdog_resets', 'type': 'uint8'},
                          {'name': 'software_resets', 'type': 'uint8'},
                          {'name': 'dither_adjust', 'type': 'uint16'},
                          {'name': 'record_sensor_counts', 'type': 'uint8'},
                        ]},
       'get_sub_device_range': 0,
       'name': 'INTERNAL_STATS',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.goddarddesign.com/pdf_doc/rdmlabpack%20srn%20v2p9.pdf',
       'notes': 'Fetch the internal stats.',
       'value': 0xc862},
    ],
  },
  {'id': 0x4a61,
   'name': 'Jands',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'enabled', 'type': 'bool'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'NE_FAULT_DETECT_MODE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Turns the Neutral-Earth (N-E) fault detector on and off.',
       'value': 0x8080},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'DMX_PROTECT_MODE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Unknown.',
       'value': 0x8082},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'mode', 'type': 'uint8',
                           'enums': [(0, 'Hold'), (1, 'Fade to scene #1')]
                          }
                        ]},
       'get_sub_device_range': 0,
       'name': 'DMX_LOSS_MODE',
       'set_request': {'items': [{'name': 'mode', 'type': 'uint8',
                                  'enums': [
                                      # TODO: check if we can use scene 2 as well
                                      (0, 'Hold'), (1, 'Fade to scene #1')]
                          }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Controls the behaviour when the DMX signal is lost.',
       'value': 0x8084},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'level', 'type': 'uint8', 'enums': [
                            (0, 'Off')]
                          }
                        ]},
       'get_sub_device_range': 2,
       'name': 'PREHEAT_LEVEL',
       'set_request': {'items': [{'name': 'level', 'type': 'uint8',
                                  'enums': [(0, 'Off')],
                                  'range': [(0, 0x32)],
                          }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'The Preheat function is used to  inject a small amount of power into the lamps when the control is set to zero.',
       'value': 0x8086},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'cap', 'type': 'uint8',
                           'enums': [(0, 'Off'),
                                     (1, '95%'),
                                     (2, '90%'),
                                     (3, '85%'),
                                     (4, '80%'),
                                     (5, '75%'),
                                     (6, '70%'),
                                     (7, '65%'),
                                     (8, '60%'),
                                     (9, '55%'),
                                     (10, '50%'),
                                     (11, '45%'),
                                     (12, '40%')],
                          }
                        ]},
       'get_sub_device_range': 2,
       'name': 'OUTPUT_CAP_VALUE',
       'set_request': {'items': [{'name': 'cap', 'type': 'uint8',
                                   'enums': [(0, 'Off'),
                                             (1, '95%'),
                                             (2, '90%'),
                                             (3, '85%'),
                                             (4, '80%'),
                                             (5, '75%'),
                                             (6, '70%'),
                                             (7, '65%'),
                                             (8, '60%'),
                                             (9, '55%'),
                                             (10, '50%'),
                                             (11, '45%'),
                                             (12, '40%'),
                                            ],
                          }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Scale the output power of by a preset percentage. Each increment reduces output power by 5%, down to a minimum value of 40%. See the manual for more details on output voltage.',
       'value': 0x8088},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'get_sub_device_range': 0,
       'name': 'DMX_TERM_MODE',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': 'http://www.jands.com.au/__data/assets/pdf_file/0004/36364/HPD_User_Manual_V2.0a.pdf',
       'notes': 'Enable DMX termination.',
       'value': 0x808A},
    ]
  },
  {'id': 0x7a70,
   'name': 'Open Lighting',
   'pids': [
      {'name': 'SERIAL_NUMBER',
       'set_request': {'items': [{'name': 'serial_number', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://opendmx.net/index.php/Open_Lighting_PIDs',
       'notes': 'Sets the serial number (UID) of the device.',
       'value': 0x8000},
    ],
  },
  {'id': 21324,
   'name': 'Soundlight',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'mode', 'type': 'uint8'}]},
       'get_sub_device_range': 2,
       'name': 'DMX_HOLD_MODE',
       'set_request': {'items': [{'name': 'mode', 'type': 'uint8', 'enums': [
                          (0, 'Outputs to 0%'), (1, 'Output to 100%'),
                          (2, 'Hold'), (3, 'Go to predefined scene')],
                        }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Controls the behavior of the device when the signal fails.',
       'value': 0x80f1},
     {'get_request': {'items': [{'name': 'slot_number', 'type': 'uint16'}]},
      'get_response': {'items': [{'name': 'slot_number', 'type': 'uint16'},
                                 {'name': 'name', 'max_size': 16, 'type': 'string'}]},
      'get_sub_device_range': 2,
      'set_request': {'items': [{'name': 'slot_number', 'type': 'uint16'},
                                 {'name': 'name', 'max_size': 16, 'type': 'string'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'name': 'SLOT_LABELS',
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Sets the description (label) for a DMX512 slot.',
       'value': 0x8121},
      {'get_request': {'items': [{'name': 'sensor_number', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                                  {'name': 'type', 'type': 'uint8'},
                                  {'name': 'unit', 'type': 'uint8'},
                                  {'name': 'prefix', 'type': 'uint8'},
                                  {'name': 'range_min', 'type': 'uint16'},
                                  {'name': 'range_max', 'type': 'uint16'},
                                  {'name': 'normal_min', 'type': 'uint16'},
                                  {'name': 'normal_max', 'type': 'uint16'},
                                  {'name': 'supports_recording',
                                   'type': 'uint8'},
                                  {'name': 'name',
                                   'max_size': 20,
                                   'type': 'string'}]},
       'get_sub_device_range': 2,
       'set_request': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                                 {'name': 'type', 'type': 'uint8'},
                                 {'name': 'unit', 'type': 'uint8'},
                                 {'name': 'prefix', 'type': 'uint8'},
                                 {'name': 'range_min', 'type': 'uint16'},
                                 {'name': 'range_max', 'type': 'uint16'},
                                 {'name': 'normal_min', 'type': 'uint16'},
                                 {'name': 'normal_max', 'type': 'uint16'},
                                 {'name': 'supports_recording',
                                  'type': 'uint8'},
                                 {'name': 'name',
                                  'max_size': 20,
                                  'type': 'string'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 2,
       'name': 'MODIFY_SENSOR_DEFINITION',
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Used for setting a sensor definition for devices with variable sensor input. The SENSOR_DEFINITION PID in the E1.20 standard can read a sensor standard definition only, but not set.',
       'value': 0x8200},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'scale_value', 'type': 'uint8'}]},
       'get_sub_device_range': 2,
       'name': 'DC_CALIBRATION',
       'set_request': {'items': [{'name': 'scale_value', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'With the parameters, the outputs can be scaled to the desired maximum value',
       'value': 0xdcca},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'ip_address', 'type': 'uint32'}]},
       'get_sub_device_range': 2,
       'name': 'NETWORK_ADDRESS',
       'set_request': {'items': [{'name': 'ip_address', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Get / Set the IP Address',
       'value': 0x8801},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'net_mask', 'type': 'uint32'}]},
       'get_sub_device_range': 2,
       'name': 'NETWORK_MASK',
       'set_request': {'items': [{'name': 'net_mask', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Get / Set the subnet mask',
       'value': 0x8802},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'gateway_address', 'type': 'uint32'}]},
       'get_sub_device_range': 2,
       'name': 'GATEWAY_ADDRESS',
       'set_request': {'items': [{'name': 'gateway_address', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Get / Set the address of the default gateway.',
       'value': 0x8803},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'dns_address', 'type': 'uint32'}]},
       'get_sub_device_range': 2,
       'name': 'DNS_ADDRESS',
       'set_request': {'items': [{'name': 'dns_address', 'type': 'uint32'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'Get / Set the address of the DNS server.',
       'value': 0x8804},
      {'get_request': {'items': []},
       'get_response': {'items': [{'type': 'group',
                                   'name': 'dc_offsets',
                                   'items': [{'name': 'offset_value', 'type': 'uint8'}]
                        }]},
       'get_sub_device_range': 2,
       'name': 'DC_OFFSET',
       'set_request': {'items': [{'type': 'group',
                                  'name': 'dc_offsets',
                                  'items': [{'name': 'offset_value', 'type': 'uint8'}]
                        }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'With the parameters, the offset adjustment of the outputs are set to the desired value. It is transmitted as many values as outputs must be set. The number is determined by the parameters length (PDL).  The offset input is especially useful when driving LEDs with a different starting point',
       'value': 0xdc0e},
      {'name': 'DC_FADER_OFFSET',
        'set_request': {'items': [{'type': 'group',
                                   'name': 'offsets',
                                   'items': [{'name': 'offset_value', 'type': 'uint8'}]
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'With the parameters, the offset adjustment of the outputs are set to the desired value. The values are collected directly from the DMX input (the last valid zero weather package). There are are as many values as outputs must be set. The acquisition is initiated by the command. A reading is possible with the function DC_OFFSET. ',
       'value': 0xdc0f},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'curve_number', 'type': 'uint8'},
                          {'name': 'total_curves', 'type': 'uint8'},
                          {'name': 'segment_count', 'type': 'uint8'},
                          {'name': 'interpolation_method', 'type': 'uint8',
                           'enums': [(0, 'Step'), (1, 'Linear'), (2, 'Square'), (3, 'Cubic')],
                          },
                          {'name': 'start_value', 'type': 'uint8'},
                          {'name': 'curve_values',
                           'type': 'group',
                           'items': [
                             {'name': 'value', 'type': 'uint8'},
                           ],
                          },
                        ]},
       'get_sub_device_range': 2,
       'name': 'CURVE_DEFINITION',
       'set_request': {'items': [
                         {'name': 'curve_number', 'type': 'uint8'},
                         {'name': 'total_curves', 'type': 'uint8'},
                         {'name': 'segment_count', 'type': 'uint8'},
                         {'name': 'interpolation_method', 'type': 'uint8',
                          'enums': [(0, 'Step'), (1, 'Linear'), (2, 'Square'), (3, 'Cubic')],
                         },
                         {'name': 'start_value', 'type': 'uint8'},
                         {'name': 'curve_values',
                          'type': 'group',
                          'items': [
                            {'name': 'value', 'type': 'uint8'},
                          ],
                         },
                       ]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': 'http://www.soundlight.de/techtips/dmx512/slh_rdm_commands.htm',
       'notes': 'The number of values supplied needs to match what\' specified in the segment_count field',
       'value': 0xdccd},
   ]
  },
  {'id': 0x4c55,
   'name': 'Lumen Radio',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'enabled', 'type': 'bool'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'FULL_DISCOVERY',
       'set_request': {'items': [{'name': 'enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Starts full RDM discovery.',
       'value': 0x8000},
      # 0x8001 exists but we can't get a description for it
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'dmx_level', 'type': 'uint8'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'OUTPUT_DEFAULT_VALUE',
       'set_request': {'items': [{'name': 'dmx_level', 'type': 'uint8'}]},
       'set_response': {'items': [{'name': 'dmx_level', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Sets the output level to use when there is no DMX signal',
       'value': 0x8002},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'fade_time', 'type': 'uint8'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'DALI_FADE_TIME',
       'set_request': {'items': [{'name': 'fade_time', 'type': 'uint8'}]},
       'set_response': {'items': [{'name': 'fade_time', 'type': 'uint8'}]},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Sets the DALI fade time.',
       'value': 0x8003},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'interval', 'type': 'uint16',
                           'multiplier': -1},
                        ]},
       'get_sub_device_range': 0,
       'name': 'INCREMENTAL_DISCOVERY_INTERVAL',
       'set_request': {'items': [{'name': 'interval', 'type': 'uint16',
                                  'range': [(0x101, 0xffff)],
                                  'multiplier': -1,
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Controls the frequency at which incremental discovery runs.',
       'value': 0x8101},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'timer_factor', 'type': 'uint16'}
                        ]},
       'get_sub_device_range': 0,
       'name': 'ACK_TIMER_FACTOR',
       'set_request': {'items': [{'name': 'timer_factor', 'type': 'uint16',
                                  'range': [(0x101, 0xffff)],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 0,
       'link': '',
       'notes': 'Unknown.',
       'value': 0x8102},
    ],
  },
  {'id': 0x6574,
   'name': 'ETC',
   'pids': [
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'curve_setting',
                           'type': 'uint8',
                           'enums': [(0, 'Standard'),
                                     (1, 'Incandescent'),
                                     (2, 'Linear Response'),
                                     (3, 'Quick Curve (No Smoothing)')],
                        }]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_CURVE',
       'set_request': {'items': [{'name': 'curve_setting', 'type': 'uint8',
                                  'enums': [(0, 'Standard'),
                                            (1, 'Incandescent'),
                                            (2, 'Linear Response'),
                                            (3, 'Quick Curve (No Smoothing)')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the LED response curve.',
       'value': 0x8101},
      {'get_request': {'items': [{'name': 'curve', 'type': 'uint8',}]},
       'get_response': {'items': [{'name': 'curve_number', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_CURVE_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a LED response curve.',
       'value': 0x8102},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'strobe_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_STROBE',
       'set_request': {'items': [{'name': 'strobe_enabled', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Enable/Disable the strobe feature.',
       'value': 0x8103},
      {'get_request': {'items': []},
       'get_response': {'items': [
                          {'name': 'output_mode',
                           'type': 'uint8',
                           'enums': [(0, 'Regulated mode, droop com, LEDs dim at high temps'),
                                     (1, 'Boost mode, no droop comp, LEDs dim at high temps'),
                                     (2, 'Protected mode, LEDs are always dim to prevent overtemp.')],
                        }]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_OUTPUT_MODE',
       'set_request': {'items': [{'name': 'output_mode', 'type': 'uint8',
                                  'enums': [(0, 'Regulated'), (1, 'Boost'), (2, 'Protected')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the LED Output Mode',
       'value': 0x8104},
      {'get_request': {'items': [{'name': 'output_mode', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'output_mode', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_OUTPUT_MODE_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a LED output mode.',
       'value': 0x8105},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'red_shift_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_RED_SHIFT',
       'set_request': {'items': [{'name': 'red_shift_enabled', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Enable/Disable the Red Shift Effect.',
       'value': 0x8106},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'white_point', 'type': 'uint8',
                                   'enums': [(0, '2950K'), (1, '3200K'), (2, '5600K'), (3, '6500K')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_WHITE_POINT',
       'set_request': {'items': [{'name': 'white_point', 'type': 'uint8',
                                  'enums': [(0, '2950K'), (1, '3200K'), (2, '5600K'), (3, '6500K')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the white point',
       'value': 0x8107},
      {'get_request': {'items': [{'name': 'white_point', 'type': 'uint8',}]},
       'get_response': {'items': [{'name': 'white_point', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_WHITE_POINT_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a given white point.',
       'value': 0x8108},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'frequency', 'type': 'uint16'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_FREQUENCY',
       'set_request': {'items': [{'name': 'frequency', 'type': 'uint16', 'range': [(900, 1500)]}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the LED output frequency',
       'value': 0x8109},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'loss_behavior', 'type': 'uint8',
                                   'enums': [(0, 'Instant go dark.'), (1, 'Hold for 2 mins'), (2, 'Hold forever')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_DMX_LOSS_BEHAVIOR',
       'set_request': {'items': [{'name': 'loss_behavior', 'type': 'uint8',
                                  'enums': [(0, 'Instant go dark.'), (1, 'Hold for 2 mins'), (2, 'Hold forever')],
                                 }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Control the behavior when the DMX512 signal is lost.',
       'value': 0x810a},
      {'get_request': {'items': [{'name': 'loss_behavior', 'type': 'uint8',}]},
       'get_response': {'items': [{'name': 'loss_behavior', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_DMX_LOSS_BEHAVIOR_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a DMX512 loss mode.',
       'value': 0x810b},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'plus_seven_enabled', 'type': 'bool'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_PLUS_SEVEN',
       'set_request': {'items': [{'name': 'plus_seven_enabled', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Enable/Disable the Plus Seven Control.',
       'value': 0x810c},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'backlight_brightness', 'type': 'uint8'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_BACKLIGHT_BRIGHTNESS',
       'set_request': {'items': [{'name': 'backlight_brightness', 'type': 'uint8'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Control the brightness of the LCD backlight.',
       'value': 0x810d},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'backlight_timeout', 'type': 'uint8',
                                   'enums': [(0, 'Never'), (1, '30 seconds'),
                                             (2, '1 minute'), (3, '5 minutes'),
                                             (4, '15 minutes')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_BACKLIGHT_TIMEOUT',
       'set_request': {'items': [{'name': 'backlight_timeout', 'type': 'uint8',
                                  'enums': [(0, 'Never'), (1, '30 seconds'),
                                            (2, '1 minute'), (3, '5 minutes'),
                                            (4, '15 minutes')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Control the timeout for the LCD backlight.',
       'value': 0x810e},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'status_indicators', 'type': 'bool'}]},
       'get_sub_device_range': 2,
       'name': 'ETC_STATUS_INDICATORS',
       'set_request': {'items': [{'name': 'status_indicators', 'type': 'bool'}]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Enable/Disable the status indicators.',
       'value': 0x810f},
      {'name': 'ETC_RECALIBRATE_FIXTURE',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Recalibrate the fixture',
       'value': 0x8110},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'over_temperature_mode', 'type': 'uint8',
                                   'enums': [(0, 'Dark'), (1, 'Red')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_OVER_TEMP_MODE',
       'set_request': {'items': [{'name': 'over_temperature_mode', 'type': 'uint8',
                                  'enums': [(0, 'Dark'), (1, 'Red')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the over temperature mode.',
       'value': 0x8111},
      {'get_request': {'items': []},
       'get_response': {'items': [{'name': 'quick_setup_mode', 'type': 'uint8',
                                   'enums': [(0, 'General Use'), (1, 'State Setup'),
                                             (2, 'Architectural Setup'), (3, 'Effects Setup'),
                                             (4, 'Studio Setup'), (5, 'Advanced Setup')],
                                  }]},
       'get_sub_device_range': 2,
       'name': 'ETC_SIMPLE_SETUP_MODE',
       'set_request': {'items': [{'name': 'quick_setup_mode', 'type': 'uint8',
                                  'enums': [(0, 'General Use'), (1, 'State Setup'),
                                            (2, 'Architectural Setup'), (3, 'Effects Setup'),
                                            (4, 'Studio Setup'), (5, 'Advanced Setup')],
                                  }]},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Get or Set the simple setup mode.',
       'value': 0x8112},

      {'get_request': {'items': [{'name': 'strobe_number', 'type': 'uint8',}]},
       'get_response': {'items': [{'name': 'strobe_number', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_STROBE_DESCRIPTION',
       'link': '',
       'notes': 'Get the text description for a strobe value.',
       'value': 0x8113},
      {'get_request': {'items': [{'name': 'red_shift_value', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'red_shift_value', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_RED_SHIFT_DESCRIPTION',
       'link': '',
       'notes': 'Get a text description of a given Red Shift value.',
       'value': 0x8114},
      {'get_request': {'items': [{'name': 'plus_seven_mode', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'plus_seven_mode', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_LED_PLUS_SEVEN_DESCRIPTION',
       'link': '',
       'notes': 'Get a text description for a plus seven value.',
       'value': 0x8115},
      {'get_request': {'items': [{'name': 'backlight_timeout', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'backlight_timeout', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_BACKLIGHT_TIMEOUT_DESCRIPTION',
       'link': '',
       'notes': 'Get a text description for a backlight timeout value.',
       'value': 0x8116},
      {'get_request': {'items': [{'name': 'simple_setup_mode', 'type': 'uint8'}]},
       'get_response': {'items': [{'name': 'simple_setup_mode', 'type': 'uint8'},
                                  {'name': 'description', 'type': 'string', 'max_size': 32},
                                 ]},
       'get_sub_device_range': 2,
       'name': 'ETC_SIMPLE_SETUP_MODE_DESCRIPTION',
       'link': '',
       'notes': 'Get a text description for a simple setup mode.',
       'value': 0x8117},
      {'name': 'ETC_PREPARE_FOR_SOFTWARE_DOWNLOAD',
       'set_request': {'items': []},
       'set_response': {'items': []},
       'set_sub_device_range': 1,
       'link': '',
       'notes': 'Prepare the unit for software download.',
       'value': 0xf000},
    ],
  },
]


pids = [
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'description',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_MODEL_DESCRIPTION',
  'value': 128},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'MANUFACTURER_LABEL',
  'value': 129},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_LABEL',
  'set_request': {'items': [{'name': 'label',
                             'max_size': 32,
                             'type': 'string'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 130},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'state',
                              'type': 'uint8',
                              'enums': [(0, 'Off'), (1, 'On'), (2, 'Strike'), (3, 'Standby'), (4, 'Not Present'), (0x7f, 'Error')],
                              'range': [(0, 4), (0x7f, 0xDF)],
                  }]},
  'get_sub_device_range': 2,
  'name': 'LAMP_STATE',
  'set_request': {'items': [{'name': 'state', 'type': 'uint8',
                  'enums': [(0, 'Off'), (1, 'On'), (2, 'Strike'), (3, 'Standby')],
                  'range': [(0, 3), (0x80, 0xDF)],
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1027},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'mode',
                              'type': 'uint8',
                              'enums': [(0, 'Off'), (1, 'DMX'), (2, 'On'), (3, 'On After Calibration')],
                              'range': [(0, 3), (0x80, 0xDF)],
                            }]},
  'get_sub_device_range': 2,
  'name': 'LAMP_ON_MODE',
  'set_request': {'items': [{'name': 'mode', 'type': 'uint8',
                  'enums': [(0, 'Off'), (1, 'DMX'), (2, 'On'), (3, 'On After Calibration')],
                  'range': [(0, 3), (0x80, 0xDF)],
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1028},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'power_cycles', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_POWER_CYCLES',
  'set_request': {'items': [{'name': 'power_cycles', 'type': 'uint32'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1029},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'identify_state', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'IDENTIFY_DEVICE',
  'set_request': {'items': [{'name': 'identify_state', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4096},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'version', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'BOOT_SOFTWARE_VERSION',
  'value': 193},
 {'name': 'RECORD_SENSORS',
  'set_request': {'items': [{'name': 'sensor_number', 'type': 'uint8',
                             'range': [(0, 0xff)],
                             'enums': [(0xff, 'All Sensors')],
                 }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 514},
 {'get_request': {'items': []},
  'get_response': {'items': [{'type': 'group',
                              'name': 'uids',
                              'items': [{'name': 'manufacturer_id', 'type': 'uint16'},
                                        {'name': 'device_id', 'type': 'uint32'}],
                   }]},
  'get_sub_device_range': 0,
  'name': 'PROXIED_DEVICES',
  'value': 16},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'device_count', 'type': 'uint16'},
                             {'name': 'list_changed', 'type': 'bool'}]},
  'get_sub_device_range': 0,
  'name': 'PROXIED_DEVICE_COUNT',
  'value': 17},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'year', 'type': 'uint16'},
                             {'name': 'month', 'type': 'uint8'},
                             {'name': 'day', 'type': 'uint8'},
                             {'name': 'hour', 'type': 'uint8'},
                             {'name': 'minute', 'type': 'uint8'},
                             {'name': 'second', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'REAL_TIME_CLOCK',
  'set_request': {'items': [{'name': 'year', 'type': 'uint16', 'range': [(2003, 65535)]},
                    {'name': 'month', 'type': 'uint8', 'range': [(1, 12)]},
                    {'name': 'day', 'type': 'uint8', 'range': [(1, 31)]},
                    {'name': 'hour', 'type': 'uint8', 'range': [(0, 23)]},
                    {'name': 'minute', 'type': 'uint8', 'range': [(0, 59)]},
                    {'name': 'second', 'type': 'uint8', 'range': [(0, 60)]}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1539},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'short_message', 'type': 'uint16'},
                             {'name': 'length_mismatch', 'type': 'uint16'},
                             {'name': 'checksum_fail', 'type': 'uint16'}]},
  'get_sub_device_range': 0,
  'name': 'COMMS_STATUS',
  'set_request': {'items': []},
  'set_response': {'items': []},
  'set_sub_device_range': 0,
  'value': 21},
 {'get_request': {'items': [{'name': 'sensor_number', 'type': 'uint8',
                             'range': [(0, 0xfe)],
                 }]},
  'get_response': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                             {'name': 'type', 'type': 'uint8'},
                             {'name': 'unit', 'type': 'uint8'},
                             {'name': 'prefix', 'type': 'uint8'},
                             {'name': 'range_min', 'type': 'int16',
                              'enums': [(-32768, 'Undefined')],
                              'range': [(-32768, 32767)]
                             },
                             {'name': 'range_max', 'type': 'int16',
                              'enums': [(32767, 'Undefined')],
                              'range': [(-32767, 32767)]
                             },
                             {'name': 'normal_min', 'type': 'int16',
                              'enums': [(-32768, 'Undefined')],
                              'range': [(-32768, 32767)]
                             },
                             {'name': 'normal_max', 'type': 'int16',
                              'enums': [(32767, 'Undefined')],
                              'range': [(-32768, 32767)]
                             },
                             {'name': 'supports_recording',
                              'type': 'uint8'},
                             {'name': 'name',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'SENSOR_DEFINITION',
  'value': 512},
 {'get_request': {'items': [{'name': 'status_type', 'type': 'uint8', 'enums': [
                    (1, 'Last Message'), (2, 'Advisory'),
                    (3, 'Warning'), (4, 'Error')]
                   }]},
  'get_response': {'items': []},
  'get_sub_device_range': 0,
  'name': 'QUEUED_MESSAGE',
  'value': 32},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'language',
                              'max_size': 2,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'LANGUAGE',
  'set_request': {'items': [{'name': 'language',
                             'max_size': 2,
                             'type': 'string'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 176},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'slot_values',
                              'type': 'group',
                              'items': [{'name': 'slot_offset', 'type': 'uint16'},
                                        {'name': 'default_slot_value', 'type': 'uint8'}]
                  }]},
  'get_sub_device_range': 2,
  'name': 'DEFAULT_SLOT_VALUE',
  'value': 290},
 {'name': 'RESET_DEVICE',
  'set_request': {'items': [{'name': 'reset_mode', 'type': 'uint8', 'enums': [
                    (1, 'Warm'), (0xff, 'Cold')]
                 }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4097},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'hours', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_HOURS',
  'set_request': {'items': [{'name': 'hours', 'type': 'uint32'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1024},
 {'name': 'CAPTURE_PRESET',
  'set_request': {'items': [
    {'name': 'scene', 'type': 'uint16', 'range': [(0x1, 0xfffe)]},
    {'name': 'fade_up_time', 'type': 'uint16', 'multiplier': -1,},
    {'name': 'fade_down_time', 'type': 'uint16', 'multiplier': -1,},
    {'name': 'wait_time', 'type': 'uint16', 'multiplier': -1}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4144},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'dmx_address', 'type': 'uint16'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_START_ADDRESS',
  'set_request': {'items': [{'name': 'dmx_address', 'type': 'uint16', 'range': [
                    (1, 512)],
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 240},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'invert_status', 'type': 'uint8',
                              'enums': [(0, 'Off'), (1, 'On'), (2, 'Auto')]}]},
  'get_sub_device_range': 2,
  'name': 'DISPLAY_INVERT',
  'set_request': {'items': [{'name': 'invert_status', 'type': 'uint8',
                             'enums': [(0, 'Off'), (1, 'On'), (2, 'Auto')]
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1280},
 {'get_request': {'items': [{'name': 'status_type', 'type': 'uint8', 'enums': [
                    (0, 'None'), (1, 'Last Message'), (2, 'Advisory'),
                    (3, 'Warning'), (4, 'Error')]
                   }]},
  'get_response': {'items': [{'type': 'group',
                              'name': 'messages',
                              'items': [{'name': 'sub_device', 'type': 'uint16'},
                                        {'name': 'status_type', 'type': 'uint8'},
                                        {'name': 'message_id', 'type': 'uint16'},
                                        {'name': 'value1', 'type': 'int16'},
                                        {'name': 'value2', 'type': 'int16'}],
                  }]},
  'get_sub_device_range': 0,
  'name': 'STATUS_MESSAGE',
  'value': 48},
 {'get_request': {'items': [{'name': 'status_id', 'type': 'uint16'}]},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 0,
  'name': 'STATUS_ID_DESCRIPTION',
  'value': 49},
 {'name': 'CLEAR_STATUS_ID',
  'set_request': {'items': []},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 50},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'status_type', 'type': 'uint8'}]},
  'get_sub_device_range': 3,
  'name': 'SUB_DEVICE_STATUS_REPORT_THRESHOLD',
  'set_request': {'items': [{'name': 'status_type', 'type': 'uint8', 'enums': [
                    (0, 'None'), (2, 'Advisory'), (3, 'Warning'), (4, 'Error')]
                   }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 51},
 {'get_request': {'items': [{'name': 'sensor_number', 'type': 'uint8',
                             'range': [(0, 0xfe)],
                  }]},
  'get_response': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                             {'name': 'present_value', 'type': 'int16'},
                             {'name': 'lowest', 'type': 'int16'},
                             {'name': 'highest', 'type': 'int16'},
                             {'name': 'recorded', 'type': 'int16'}]},
  'get_sub_device_range': 2,
  'name': 'SENSOR_VALUE',
  'set_request': {'items': [{'name': 'sensor_number',
                             'type': 'uint8',
                             'range': [(0, 0xff)],
                             'enums': [(0xff, 'All Sensors')],
                 }]},
  'set_response': {'items': [{'name': 'sensor_number', 'type': 'uint8'},
                             {'name': 'present_value', 'type': 'uint16'},
                             {'name': 'lowest', 'type': 'uint16'},
                             {'name': 'highest', 'type': 'uint16'},
                             {'name': 'recorded', 'type': 'uint16'}]},
  'set_sub_device_range': 1,
  'value': 513},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'invert', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'PAN_INVERT',
  'set_request': {'items': [{'name': 'invert', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1536},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'SOFTWARE_VERSION_LABEL',
  'value': 192},
 {'get_request': {'items': []},
  'get_response': {'items': [{'type': 'group',
                              'name': 'languages',
                              'items': [{'name': 'language',
                                         'max_size': 2,
                                         'min_size': 2,
                                         'type': 'string'}],
                  }]},
  'get_sub_device_range': 2,
  'name': 'LANGUAGE_CAPABILITIES',
  'value': 160},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'label',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'BOOT_SOFTWARE_LABEL',
  'value': 194},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'hours', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'LAMP_HOURS',
  'set_request': {'items': [{'name': 'hours', 'type': 'uint32'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1025},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'mode', 'type': 'uint16',
                              'enums': [(0, 'Off'), (0xffff, 'All')],
                              'range': [(0, 0xffff)]},
                             {'name': 'level', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'PRESET_PLAYBACK',
  'set_request': {'items': [{'name': 'mode', 'type': 'uint16',
                             'enums': [(0, 'Off'), (0xffff, 'All')],
                             'range': [(0, 0xffff)]},
                            {'name': 'level', 'type': 'uint8'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4145},
 {'get_request': {'items': [{'name': 'personality', 'type': 'uint8', 'range': [
                    (1, 0xff)]
                  }]},
  'get_response': {'items': [{'name': 'personality', 'type': 'uint8'},
                             {'name': 'slots_required', 'type': 'uint16'},
                             {'name': 'name',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_PERSONALITY_DESCRIPTION',
  'value': 225},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'level', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DISPLAY_LEVEL',
  'set_request': {'items': [{'name': 'level', 'type': 'uint8'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1281},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'current_personality',
                              'type': 'uint8'},
                             {'name': 'personality_count',
                              'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_PERSONALITY',
  'set_request': {'items': [{'name': 'personality', 'type': 'uint8', 'range': [
                    (1, 0xff)]
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 224},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'slots',
                              'type': 'group',
                              'items': [{'name': 'slot_offset', 'type': 'uint16'},
                                        {'name': 'slot_type', 'type': 'uint8'},
                                        {'name': 'slot_label_id', 'type': 'uint16'}],
                   }]},
  'get_sub_device_range': 2,
  'name': 'SLOT_INFO',
  'value': 288},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'params',
                              'type': 'group',
                              'items': [{'name': 'param_id', 'type': 'uint16'}],
                             }]
                  },
  'get_sub_device_range': 2,
  'name': 'SUPPORTED_PARAMETERS',
  'value': 80},
 {'get_request': {'items': [{'name': 'pid', 'type': 'uint16'}]},
  'get_response': {'items': [{'name': 'pid', 'type': 'uint16'},
                             {'name': 'pdl_size', 'type': 'uint8'},
                             {'name': 'data_type', 'type': 'uint8'},
                             {'name': 'command_class', 'type': 'uint8'},
                             {'name': 'type', 'type': 'uint8'},
                             {'name': 'unit', 'type': 'uint8'},
                             {'name': 'prefix', 'type': 'uint8'},
                             {'name': 'min_value', 'type': 'uint32'},
                             {'name': 'max_value', 'type': 'uint32'},
                             {'name': 'default_value', 'type': 'uint32'},
                             {'name': 'description',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 0,
  'name': 'PARAMETER_DESCRIPTION',
  'value': 81},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'invert', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'TILT_INVERT',
  'set_request': {'items': [{'name': 'invert', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1537},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'protocol_major', 'type': 'uint8'},
                             {'name': 'protocol_minor', 'type': 'uint8'},
                             {'name': 'device_model', 'type': 'uint16'},
                             {'name': 'product_category',
                              'type': 'uint16'},
                             {'name': 'software_version',
                              'type': 'uint32'},
                             {'name': 'dmx_footprint', 'type': 'uint16'},
                             {'name': 'current_personality',
                              'type': 'uint8'},
                             {'name': 'personality_count',
                              'type': 'uint8'},
                             {'name': 'dmx_start_address', 'type': 'uint16'},
                             {'name': 'sub_device_count',
                              'type': 'uint16'},
                             {'name': 'sensor_count', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DEVICE_INFO',
  'value': 96},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'using_defaults', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'FACTORY_DEFAULTS',
  'set_request': {'items': []},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 144},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'strikes', 'type': 'uint32'}]},
  'get_sub_device_range': 2,
  'name': 'LAMP_STRIKES',
  'set_request': {'items': [{'name': 'strikes', 'type': 'uint32'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1026},
 {'get_request': {'items': [{'name': 'test_number', 'type': 'uint8'}]},
  'get_response': {'items': [{'name': 'test_number', 'type': 'uint8'},
                             {'name': 'description',
                              'max_size': 32,
                              'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'SELF_TEST_DESCRIPTION',
  'value': 4129},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'power_state', 'type': 'uint8',
                              'enums': [(0, 'Full Off'), (1, 'Shutdown'), (2, 'Standby'), (0xff, 'Normal')],
                            }]},
  'get_sub_device_range': 2,
  'name': 'POWER_STATE',
  'set_request': {'items': [{'name': 'power_state', 'type': 'uint8', 'enums': [
                    (0, 'Full Off'), (1, 'Shutdown'), (2, 'Standby'),
                    (0xff, 'Normal')]
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4112},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'tests_active', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'PERFORM_SELF_TEST',
  'set_request': {'items': [{'name': 'test_number', 'type': 'uint8',
                  'range': [(0, 0xff)],
                  'enums': [(0, 'Off'), (0xff, 'All')],
                  }]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 4128},
 {'get_request': {'items': [{'name': 'slot_number', 'type': 'uint16'}]},
  'get_response': {'items': [{'name': 'slot_number', 'type': 'uint16'},
                             {'name': 'name', 'max_size': 32, 'type': 'string'}]},
  'get_sub_device_range': 2,
  'name': 'SLOT_DESCRIPTION',
  'value': 289},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'detail_ids',
                              'type': 'group',
                              'max_size': 6,
                              'items': [{'name': 'detail_id', 'type': 'uint16'}],
                   }]},
  'get_sub_device_range': 2,
  'name': 'PRODUCT_DETAIL_ID_LIST',
  'value': 112},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'swap', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'PAN_TILT_SWAP',
  'set_request': {
                  'items': [{'name': 'swap', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 1538},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'identify_mode', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'IDENTIFY_MODE',
  'set_request': {
                  'items': [{'name': 'identify_mode',
                             'type': 'uint8',
                             'enums': [(0, 'Quiet'), (0xff, 'Loud')],
                            }]
                 },
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7fb0},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'level_field_supported', 'type': 'bool'},
    {'name': 'preset_sequence_supported', 'type': 'bool'},
    {'name': 'split_times_supported', 'type': 'bool'},
    {'name': 'fail_infitite_delay_supported', 'type': 'bool'},
    {'name': 'fail_infitite_hold_supported', 'type': 'bool'},
    {'name': 'startup_infitite_hold_supported', 'type': 'bool'},
    {'name': 'max_scene_number', 'type': 'uint16'},
    {'name': 'min_preset_fade_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_preset_fade_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_preset_wait_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_preset_wait_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_fail_delay_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_fail_delay_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_fail_hold_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_fail_hold_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_startup_delay_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_startup_delay_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'min_startup_hold_time', 'type': 'uint16', 'multiplier': -1},
    {'name': 'max_startup_hold_time', 'type': 'uint16', 'multiplier': -1},
  ]},
  'get_sub_device_range': 2,
  'name': 'PRESET_INFO',
  'value': 0x7fb1},
 {'get_request': {'items': [
    {'name': 'scene_number', 'type': 'uint16', 'range': [(1, 0xfffe)]},
  ]},
  'get_response': {'items': [
      {'name': 'scene_number', 'type': 'uint16', 'range': [(1, 0xfffe)]},
      {'name': 'up_fade_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'down_fade_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'wait_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'programmed', 'type': 'uint16',
       'enums': [(0, 'Not Programmed'), (1, 'Programmed'), (2, 'Read Only')],
      },
  ]},
  'get_sub_device_range': 2,
  'set_request': {'items': [
      {'name': 'scene_number', 'type': 'uint16', 'range': [(1, 0xfffe)]},
      {'name': 'up_fade_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'down_fade_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'wait_time', 'type': 'uint16', 'multiplier': -1},
      {'name': 'clear_preset', 'type': 'bool'},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'name': 'PRESET_STATUS',
  'value': 0x7fb2},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'merge_mode', 'type': 'uint8',
     'enums': [(0, 'Default'), (1, 'HTP'), (2, 'LTP'), (3, 'DMX Only'),
               (0xff, 'Other')],
    },
  ]},
  'get_sub_device_range': 2,
  'set_request': {'items': [
    {'name': 'merge_mode', 'type': 'uint8',
     'enums': [(0, 'Default'), (1, 'HTP'), (2, 'LTP'), (3, 'DMX Only'),
               (0xff, 'Other')],
    },
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'name': 'PRESET_MERGE_MODE',
  'value': 0x7fb3},
 {'get_request': {'items': []},
  'get_response': {'items': [{'name': 'power_on_self_test', 'type': 'bool'}]},
  'get_sub_device_range': 2,
  'name': 'POWER_ON_SELF_TEST',
  'set_request': {'items': [{'name': 'power_on_self_test', 'type': 'bool'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7fb4},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'sub_device_footprint', 'type': 'uint16'},
    {'name': 'base_dmx_address', 'type': 'uint16'}]},
  'get_sub_device_range': 0,
  'name': 'DMX_BLOCK_ADDRESS',
  'set_request': {'items': [
    {'name': 'base_dmx_address', 'type': 'uint16', 'range': [(1, 512)]}
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 0,
  'value': 0x7ff0},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'scene_number', 'type': 'uint16'},
    {'name': 'loss_of_signal_delay', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'hold_time', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'level', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_FAIL_MODE',
  'set_request': {'items': [
    {'name': 'scene_number', 'type': 'uint16',
     'enums': [(0, 'Fixed Level')],
     'range': [(0, 0xff)],
    },
    {'name': 'loss_of_signal_delay', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'hold_time', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'level', 'type': 'uint8'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff1},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'scene_number', 'type': 'uint16'},
    {'name': 'startup_delay', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'hold_time', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'level', 'type': 'uint8'}]},
  'get_sub_device_range': 2,
  'name': 'DMX_STARTUP_MODE',
  'set_request': {'items': [
    {'name': 'scene_number', 'type': 'uint16',
     'enums': [(0, 'Fixed Level')],
     'range': [(0, 0xff)],
    },
    {'name': 'startup_delay', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'hold_time', 'type': 'uint16', 'multiplier': -1,
     'enums': [(0xffff, 'Infinite')],
     'range': [(0, 0xffff)],
    },
    {'name': 'level', 'type': 'uint8'}]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff2},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'minimum_level_lower', 'type': 'uint16'},
    {'name': 'minimum_level_upper', 'type': 'uint16'},
    {'name': 'maximum_level_lower', 'type': 'uint16'},
    {'name': 'maximum_level_upper', 'type': 'uint16'},
    {'name': 'number_curves_supported', 'type': 'uint8'},
    {'name': 'levels_resolution', 'type': 'uint8',
     'range': [(0, 0x10)],
    },
    {'name': 'split_levels_supported', 'type': 'bool'},
  ]},
  'get_sub_device_range': 2,
  'name': 'DIMMER_INFO',
  'value': 0x7ff3},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'minimum_level_increasing', 'type': 'uint16'},
    {'name': 'minimum_level_decreasing', 'type': 'uint16'},
    {'name': 'on_below_minimum', 'type': 'bool'},
  ]},
  'get_sub_device_range': 2,
  'name': 'MINIMUM_LEVEL',
  'set_request': {'items': [
    {'name': 'minimum_level_increasing', 'type': 'uint16'},
    {'name': 'minimum_level_decreasing', 'type': 'uint16'},
    {'name': 'on_below_minimum', 'type': 'bool'},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff4},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'maximum_level', 'type': 'uint16'},
  ]},
  'get_sub_device_range': 2,
  'name': 'MAXIMUM_LEVEL',
  'set_request': {'items': [
    {'name': 'maximum_level', 'type': 'uint16'},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff5},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'current_curve', 'type': 'uint8'},
    {'name': 'number_curves', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'CURVE',
  'set_request': {'items': [
    {'name': 'curve', 'type': 'uint8', 'range': [(1, 0xff0)]},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff6},
 {'get_request': {'items': [
   {'name': 'curve_number', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'get_response': {'items': [
    {'name': 'curve_number', 'type': 'uint8', 'range': [(1, 0xff)]},
    {'name': 'curve_description', 'type': 'string', 'max_size': 32},
  ]},
  'get_sub_device_range': 2,
  'name': 'CURVE_DESCRIPTION',
  'value': 0x7ff7},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'current_response_time', 'type': 'uint8'},
    {'name': 'number_response_options', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'OUTPUT_RESPONSE_TIME',
  'set_request': {'items': [
    {'name': 'response_time', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ff8},
 {'get_request': {'items': [
   {'name': 'response_time', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'get_response': {'items': [
    {'name': 'response_time', 'type': 'uint8', 'range': [(1, 0xff)]},
    {'name': 'response_time_description', 'type': 'string', 'max_size': 32},
  ]},
  'get_sub_device_range': 2,
  'name': 'OUTPUT_RESPONSE_TIME_DESCRIPTION',
  'value': 0x7ff9},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'current_moduluation_frequency', 'type': 'uint8'},
    {'name': 'number_modluation_frequencies', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'MODULATION_FREQUENCY',
  'set_request': {'items': [
    {'name': 'modulation_frequency', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ffa},
 {'get_request': {'items': [
   {'name': 'modulation_frequency', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'get_response': {'items': [
    {'name': 'modulation_frequency', 'type': 'uint8', 'range': [(1, 0xff)]},
    {'name': 'frequency', 'type': 'uint32'},
    {'name': 'modulation_frequence_description', 'type': 'string', 'max_size': 32},
  ]},
  'get_sub_device_range': 2,
  'name': 'MODULATION_FREQUENCY_DESCRIPTION',
  'value': 0x7ffb},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'hours_remaining', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'BURN_IN',
  'set_request': {'items': [
    {'name': 'hours', 'type': 'uint8'},
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ffc},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'pin_code', 'type': 'uint16',
     'range': [(0, 0x0270f)],
    },
  ]},
  'get_sub_device_range': 2,
  'name': 'LOCK_PIN',
  'set_request': {'items': [
    {'name': 'new_pin_code', 'type': 'uint16',
     'range': [(0, 0x270f)],
    },
    {'name': 'current_pin_code', 'type': 'uint16',
     'range': [(0, 0x270f)],
    },
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ffd},
 {'get_request': {'items': []},
  'get_response': {'items': [
    {'name': 'current_lock_state', 'type': 'uint8',
     'enums': [(0, 'Unlocked')],
     'range': [(0, 0xff)],
    },
    {'name': 'number_of_lock_states', 'type': 'uint8'},
  ]},
  'get_sub_device_range': 2,
  'name': 'LOCK_STATE',
  'set_request': {'items': [
    {'name': 'pin_code', 'type': 'uint16', 'range': [(0, 0x270f)]},
    {'name': 'lock_state', 'type': 'uint8',
     'enums': [(0, 'Unlocked')],
     'range': [(0, 0xff)],
    },
  ]},
  'set_response': {'items': []},
  'set_sub_device_range': 1,
  'value': 0x7ffe},
 {'get_request': {'items': [
     {'name': 'lock_state', 'type': 'uint8', 'range': [(1, 0xff)]},
  ]},
  'get_response': {'items': [
    {'name': 'lock_state', 'type': 'uint8',
     'range': [(1, 0xff)],
    },
    {'name': 'lock_state_description', 'type': 'string', 'max_size': 32},
  ]},
  'get_sub_device_range': 2,
  'name': 'LOCK_STATE_DESCRIPTION',
  'value': 0x7fff},
]
